#
# ################################################################################
#
# This file was automatically generated with ./gen/generate_module.py
#          Do not edit this file directly.
#          More information in repository README.md
#
# ################################################################################
#
#
# ==================================================================
# DEVICE ADMIN POLICY SET 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | name | String | True | Given name for the policy set, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses] |
# | description | String | False | The description of the policy set |
# | is_proxy | Bool | False | Flag which indicates if the policy set service is of type 'Proxy Sequence' or 'Allowed Protocols' |
# | rank | Int64 | False | The rank (priority) in relation to other policy sets. Lower rank is higher priority. |
# | service_name | String | True | Policy set service identifier. 'Allowed Protocols' or 'Server Sequence'. |
# | state | String | False | The state that the policy set is in. A disabled policy set cannot be matched. |
# | default | Bool | False | Indicates if this policy set is the default one |
# | condition_type | String | False | Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute. |
# | condition_id | String | False | UUID for condition |
# | condition_is_negate | Bool | False | Indicates whereas this condition is in negate mode |
# | condition_attribute_name | String | False | Dictionary attribute name |
# | condition_attribute_value | String | False | Attribute value for condition. Value type is specified in dictionary object. |
# | condition_dictionary_name | String | False | Dictionary name |
# | condition_dictionary_value | String | False | Dictionary value |
# | condition_operator | String | False | Equality operator |
# | children | List | False | List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`. |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_device_admin_policy_set = try(local.defaults.ise.device_administration.device_admin_policy_set, {})

  # Device Admin Policy Set (with defaults)
  device_admin_policy_set = [for item in try(local.ise.device_administration.device_admin_policy_set, []) : merge(
    local.defaults_device_admin_policy_set, # defaults
    item, # original item
    { # Nested merges for complex attributes
      children = [for i in try(item.children, []) : merge(
        try(local.defaults_device_admin_policy_set.children, {}),
        i
      )]
    }
  )]
}

# Create device admin policy set
resource "ise_device_admin_policy_set" "device_admin_policy_set" {
  for_each = { for item in try(local.device_admin_policy_set, []) : item.name => item }

  # General attributes
  name = try(each.value.name, null)
  description = try(each.value.description, null)
  is_proxy = try(each.value.is_proxy, null)
  rank = try(each.value.rank, null)
  service_name = try(each.value.service_name, null)
  state = try(each.value.state, null)
  default = try(each.value.default, null)
  condition_type = try(each.value.condition_type, null)
  condition_id = try(each.value.condition_id, null)
  condition_is_negate = try(each.value.condition_is_negate, null)
  condition_attribute_name = try(each.value.condition_attribute_name, null)
  condition_attribute_value = try(each.value.condition_attribute_value, null)
  condition_dictionary_name = try(each.value.condition_dictionary_name, null)
  condition_dictionary_value = try(each.value.condition_dictionary_value, null)
  condition_operator = try(each.value.condition_operator, null)
  children = try([for i in each.value.children : {
    condition_type = try(i.condition_type, null),
    id = try(i.id, null),
    is_negate = try(i.is_negate, null),
    attribute_name = try(i.attribute_name, null),
    attribute_value = try(i.attribute_value, null),
    dictionary_name = try(i.dictionary_name, null),
    dictionary_value = try(i.dictionary_value, null),
    operator = try(i.operator, null),
    children = try(i.children, null)
  }], null)
}
#
# ==================================================================
# DEVICE ADMIN AUTHORIZATION GLOBAL EXCEPTION RULE UPDATE RANK 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | rule_id | String | True | Authorization global exception rule ID |
# | rank | Int64 | True | The rank (priority) in relation to other rules. Lower rank is higher priority. |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_device_admin_authorization_global_exception_rule_update_rank = try(local.defaults.ise.device_administration.device_admin_authorization_global_exception_rule_update_rank, {})

  # Device Admin Authorization Global Exception Rule Update Rank (with defaults)
  device_admin_authorization_global_exception_rule_update_rank = [for item in try(local.ise.device_administration.device_admin_authorization_global_exception_rule_update_rank, []) : merge(
    local.defaults_device_admin_authorization_global_exception_rule_update_rank, # defaults
    item, # original item
    { # Nested merges for complex attributes
    }
  )]
}

# Create device admin authorization global exception rule update rank
resource "ise_device_admin_authorization_global_exception_rule_update_rank" "device_admin_authorization_global_exception_rule_update_rank" {
  for_each = { for item in try(local.device_admin_authorization_global_exception_rule_update_rank, []) : item.name => item }

  # General attributes
  rule_id = try(each.value.rule_id, null)
  rank = try(each.value.rank, null)
  
  lifecycle {
    ignore_changes = [rule_id]
  }
}
#
# ==================================================================
# DEVICE ADMIN AUTHORIZATION EXCEPTION RULE UPDATE RANK 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | rule_id | String | True | Authorization exception rule ID |
# | policy_set_id | String | False | Policy set ID |
# | rank | Int64 | True | The rank (priority) in relation to other rules. Lower rank is higher priority. |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_device_admin_authorization_exception_rule_update_rank = try(local.defaults.ise.device_administration.device_admin_authorization_exception_rule_update_rank, {})

  # Device Admin Authorization Exception Rule Update Rank (with defaults)
  device_admin_authorization_exception_rule_update_rank = [for item in try(local.ise.device_administration.device_admin_authorization_exception_rule_update_rank, []) : merge(
    local.defaults_device_admin_authorization_exception_rule_update_rank, # defaults
    item, # original item
    { # Nested merges for complex attributes
    }
  )]
}

# Create device admin authorization exception rule update rank
resource "ise_device_admin_authorization_exception_rule_update_rank" "device_admin_authorization_exception_rule_update_rank" {
  for_each = { for item in try(local.device_admin_authorization_exception_rule_update_rank, []) : item.name => item }

  # General attributes
  rule_id = try(each.value.rule_id, null)
  policy_set_id = try(each.value.policy_set_id, null)
  rank = try(each.value.rank, null)
  
  lifecycle {
    ignore_changes = [rule_id]
  }
}
#
# ==================================================================
# TACACS PROFILE 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | name | String | True | The name of the TACACS profile |
# | description | String | False | Description |
# | session_attributes | List | False |  |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_tacacs_profile = try(local.defaults.ise.device_administration.tacacs_profile, {})

  # Tacacs Profile (with defaults)
  tacacs_profile = [for item in try(local.ise.device_administration.tacacs_profile, []) : merge(
    local.defaults_tacacs_profile, # defaults
    item, # original item
    { # Nested merges for complex attributes
      session_attributes = [for i in try(item.session_attributes, []) : merge(
        try(local.defaults_tacacs_profile.session_attributes, {}),
        i
      )]
    }
  )]
}

# Create tacacs profile
resource "ise_tacacs_profile" "tacacs_profile" {
  for_each = { for item in try(local.tacacs_profile, []) : item.name => item }

  # General attributes
  name = try(each.value.name, null)
  description = try(each.value.description, null)
  session_attributes = try([for i in each.value.session_attributes : {
    type = try(i.type, null),
    name = try(i.name, null),
    value = try(i.value, null)
  }], null)
}
#
# ==================================================================
# DEVICE ADMIN POLICY SET UPDATE RANKS 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | policies | List | False |  |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_device_admin_policy_set_update_ranks = try(local.defaults.ise.device_administration.device_admin_policy_set_update_ranks, {})

  # Device Admin Policy Set Update Ranks (with defaults)
  device_admin_policy_set_update_ranks = [for item in try(local.ise.device_administration.device_admin_policy_set_update_ranks, []) : merge(
    local.defaults_device_admin_policy_set_update_ranks, # defaults
    item, # original item
    { # Nested merges for complex attributes
      policies = [for i in try(item.policies, []) : merge(
        try(local.defaults_device_admin_policy_set_update_ranks.policies, {}),
        i
      )]
    }
  )]
}

# Create device admin policy set update ranks
resource "ise_device_admin_policy_set_update_ranks" "device_admin_policy_set_update_ranks" {
  for_each = { for item in try(local.device_admin_policy_set_update_ranks, []) : item.name => item }

  # General attributes
  policies = try([for i in each.value.policies : {
    id = try(i.id, null),
    rank = try(i.rank, null)
  }], null)
}
#
# ==================================================================
# DEVICE ADMIN CONDITION 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | name | String | True | Condition name |
# | description | String | False | Condition description |
# | condition_type | String | True | Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute. |
# | is_negate | Bool | False | Indicates whereas this condition is in negate mode |
# | attribute_name | String | False | Dictionary attribute name |
# | attribute_value | String | False | Attribute value for condition. Value type is specified in dictionary object. |
# | dictionary_name | String | False | Dictionary name |
# | dictionary_value | String | False | Dictionary value |
# | operator | String | False | Equality operator |
# | children | List | False | List of child conditions. `condition_type` must be one of `LibraryConditionAndBlock` or `LibraryConditionOrBlock`. |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_device_admin_condition = try(local.defaults.ise.device_administration.device_admin_condition, {})

  # Device Admin Condition (with defaults)
  device_admin_condition = [for item in try(local.ise.device_administration.device_admin_condition, []) : merge(
    local.defaults_device_admin_condition, # defaults
    item, # original item
    { # Nested merges for complex attributes
      children = [for i in try(item.children, []) : merge(
        try(local.defaults_device_admin_condition.children, {}),
        i
      )]
    }
  )]
}

# Create device admin condition
resource "ise_device_admin_condition" "device_admin_condition" {
  for_each = { for item in try(local.device_admin_condition, []) : item.name => item }

  # General attributes
  name = try(each.value.name, null)
  description = try(each.value.description, null)
  condition_type = try(each.value.condition_type, null)
  is_negate = try(each.value.is_negate, null)
  attribute_name = try(each.value.attribute_name, null)
  attribute_value = try(each.value.attribute_value, null)
  dictionary_name = try(each.value.dictionary_name, null)
  dictionary_value = try(each.value.dictionary_value, null)
  operator = try(each.value.operator, null)
  children = try([for i in each.value.children : {
    name = try(i.name, null),
    description = try(i.description, null),
    condition_type = try(i.condition_type, null),
    id = try(i.id, null),
    is_negate = try(i.is_negate, null),
    attribute_name = try(i.attribute_name, null),
    attribute_value = try(i.attribute_value, null),
    dictionary_name = try(i.dictionary_name, null),
    dictionary_value = try(i.dictionary_value, null),
    operator = try(i.operator, null),
    children = try(i.children, null)
  }], null)
}
#
# ==================================================================
# DEVICE ADMIN AUTHENTICATION RULE 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | policy_set_id | String | False | Policy set ID |
# | name | String | True | Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses] |
# | default | Bool | False | Indicates if this rule is the default one |
# | rank | Int64 | False | The rank (priority) in relation to other rules. Lower rank is higher priority. |
# | state | String | False | The state that the rule is in. A disabled rule cannot be matched. |
# | condition_type | String | False | Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute. |
# | condition_id | String | False | UUID for condition |
# | condition_is_negate | Bool | False | Indicates whereas this condition is in negate mode |
# | condition_attribute_name | String | False | Dictionary attribute name |
# | condition_attribute_value | String | False | Attribute value for condition. Value type is specified in dictionary object. |
# | condition_dictionary_name | String | False | Dictionary name |
# | condition_dictionary_value | String | False | Dictionary value |
# | condition_operator | String | False | Equality operator |
# | children | List | False | List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`. |
# | identity_source_name | String | False | Identity source name from the identity stores |
# | if_auth_fail | String | True | Action to perform when authentication fails such as Bad credentials, disabled user and so on |
# | if_process_fail | String | True | Action to perform when ISE is unable to access the identity database |
# | if_user_not_found | String | True | Action to perform when user is not found in any of identity stores |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_device_admin_authentication_rule = try(local.defaults.ise.device_administration.device_admin_authentication_rule, {})

  # Device Admin Authentication Rule (with defaults)
  device_admin_authentication_rule = [for item in try(local.ise.device_administration.device_admin_authentication_rule, []) : merge(
    local.defaults_device_admin_authentication_rule, # defaults
    item, # original item
    { # Nested merges for complex attributes
      children = [for i in try(item.children, []) : merge(
        try(local.defaults_device_admin_authentication_rule.children, {}),
        i
      )]
    }
  )]
}

# Create device admin authentication rule
resource "ise_device_admin_authentication_rule" "device_admin_authentication_rule" {
  for_each = { for item in try(local.device_admin_authentication_rule, []) : item.name => item }

  # General attributes
  policy_set_id = try(each.value.policy_set_id, null)
  name = try(each.value.name, null)
  default = try(each.value.default, null)
  rank = try(each.value.rank, null)
  state = try(each.value.state, null)
  condition_type = try(each.value.condition_type, null)
  condition_id = try(each.value.condition_id, null)
  condition_is_negate = try(each.value.condition_is_negate, null)
  condition_attribute_name = try(each.value.condition_attribute_name, null)
  condition_attribute_value = try(each.value.condition_attribute_value, null)
  condition_dictionary_name = try(each.value.condition_dictionary_name, null)
  condition_dictionary_value = try(each.value.condition_dictionary_value, null)
  condition_operator = try(each.value.condition_operator, null)
  children = try([for i in each.value.children : {
    condition_type = try(i.condition_type, null),
    id = try(i.id, null),
    is_negate = try(i.is_negate, null),
    attribute_name = try(i.attribute_name, null),
    attribute_value = try(i.attribute_value, null),
    dictionary_name = try(i.dictionary_name, null),
    dictionary_value = try(i.dictionary_value, null),
    operator = try(i.operator, null),
    children = try(i.children, null)
  }], null)
  identity_source_name = try(each.value.identity_source_name, null)
  if_auth_fail = try(each.value.if_auth_fail, null)
  if_process_fail = try(each.value.if_process_fail, null)
  if_user_not_found = try(each.value.if_user_not_found, null)
}
#
# ==================================================================
# DEVICE ADMIN AUTHENTICATION RULE UPDATE RANK 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | rule_id | String | True | Authentication rule ID |
# | policy_set_id | String | False | Policy set ID |
# | rank | Int64 | True | The rank (priority) in relation to other rules. Lower rank is higher priority. |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_device_admin_authentication_rule_update_rank = try(local.defaults.ise.device_administration.device_admin_authentication_rule_update_rank, {})

  # Device Admin Authentication Rule Update Rank (with defaults)
  device_admin_authentication_rule_update_rank = [for item in try(local.ise.device_administration.device_admin_authentication_rule_update_rank, []) : merge(
    local.defaults_device_admin_authentication_rule_update_rank, # defaults
    item, # original item
    { # Nested merges for complex attributes
    }
  )]
}

# Create device admin authentication rule update rank
resource "ise_device_admin_authentication_rule_update_rank" "device_admin_authentication_rule_update_rank" {
  for_each = { for item in try(local.device_admin_authentication_rule_update_rank, []) : item.name => item }

  # General attributes
  rule_id = try(each.value.rule_id, null)
  policy_set_id = try(each.value.policy_set_id, null)
  rank = try(each.value.rank, null)
  
  lifecycle {
    ignore_changes = [rule_id]
  }
}
#
# ==================================================================
# DEVICE ADMIN AUTHORIZATION GLOBAL EXCEPTION RULE UPDATE RANKS 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | rules | List | False |  |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_device_admin_authorization_global_exception_rule_update_ranks = try(local.defaults.ise.device_administration.device_admin_authorization_global_exception_rule_update_ranks, {})

  # Device Admin Authorization Global Exception Rule Update Ranks (with defaults)
  device_admin_authorization_global_exception_rule_update_ranks = [for item in try(local.ise.device_administration.device_admin_authorization_global_exception_rule_update_ranks, []) : merge(
    local.defaults_device_admin_authorization_global_exception_rule_update_ranks, # defaults
    item, # original item
    { # Nested merges for complex attributes
      rules = [for i in try(item.rules, []) : merge(
        try(local.defaults_device_admin_authorization_global_exception_rule_update_ranks.rules, {}),
        i
      )]
    }
  )]
}

# Create device admin authorization global exception rule update ranks
resource "ise_device_admin_authorization_global_exception_rule_update_ranks" "device_admin_authorization_global_exception_rule_update_ranks" {
  for_each = { for item in try(local.device_admin_authorization_global_exception_rule_update_ranks, []) : item.name => item }

  # General attributes
  rules = try([for i in each.value.rules : {
    id = try(i.id, null),
    rank = try(i.rank, null)
  }], null)
}
#
# ==================================================================
# ALLOWED PROTOCOLS TACACS 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | name | String | True | The name of the allowed protocols |
# | description | String | False | Description |
# | allow_pap_ascii | Bool | True | Allow PAP ASCII |
# | allow_chap | Bool | True | Allow CHAP |
# | allow_ms_chap_v1 | Bool | True | Allow MS CHAP v1 |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_allowed_protocols_tacacs = try(local.defaults.ise.device_administration.allowed_protocols_tacacs, {})

  # Allowed Protocols Tacacs (with defaults)
  allowed_protocols_tacacs = [for item in try(local.ise.device_administration.allowed_protocols_tacacs, []) : merge(
    local.defaults_allowed_protocols_tacacs, # defaults
    item, # original item
    { # Nested merges for complex attributes
    }
  )]
}

# Create allowed protocols tacacs
resource "ise_allowed_protocols_tacacs" "allowed_protocols_tacacs" {
  for_each = { for item in try(local.allowed_protocols_tacacs, []) : item.name => item }

  # General attributes
  name = try(each.value.name, null)
  description = try(each.value.description, null)
  allow_pap_ascii = try(each.value.allow_pap_ascii, null)
  allow_chap = try(each.value.allow_chap, null)
  allow_ms_chap_v1 = try(each.value.allow_ms_chap_v1, null)
}
#
# ==================================================================
# DEVICE ADMIN AUTHORIZATION RULE UPDATE RANK 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | rule_id | String | True | Authorization rule ID |
# | policy_set_id | String | False | Policy set ID |
# | rank | Int64 | True | The rank (priority) in relation to other rules. Lower rank is higher priority. |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_device_admin_authorization_rule_update_rank = try(local.defaults.ise.device_administration.device_admin_authorization_rule_update_rank, {})

  # Device Admin Authorization Rule Update Rank (with defaults)
  device_admin_authorization_rule_update_rank = [for item in try(local.ise.device_administration.device_admin_authorization_rule_update_rank, []) : merge(
    local.defaults_device_admin_authorization_rule_update_rank, # defaults
    item, # original item
    { # Nested merges for complex attributes
    }
  )]
}

# Create device admin authorization rule update rank
resource "ise_device_admin_authorization_rule_update_rank" "device_admin_authorization_rule_update_rank" {
  for_each = { for item in try(local.device_admin_authorization_rule_update_rank, []) : item.name => item }

  # General attributes
  rule_id = try(each.value.rule_id, null)
  policy_set_id = try(each.value.policy_set_id, null)
  rank = try(each.value.rank, null)
  
  lifecycle {
    ignore_changes = [rule_id]
  }
}
#
# ==================================================================
# DEVICE ADMIN AUTHORIZATION EXCEPTION RULE UPDATE RANKS 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | policy_set_id | String | True | Policy set ID |
# | rules | List | False |  |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_device_admin_authorization_exception_rule_update_ranks = try(local.defaults.ise.device_administration.device_admin_authorization_exception_rule_update_ranks, {})

  # Device Admin Authorization Exception Rule Update Ranks (with defaults)
  device_admin_authorization_exception_rule_update_ranks = [for item in try(local.ise.device_administration.device_admin_authorization_exception_rule_update_ranks, []) : merge(
    local.defaults_device_admin_authorization_exception_rule_update_ranks, # defaults
    item, # original item
    { # Nested merges for complex attributes
      rules = [for i in try(item.rules, []) : merge(
        try(local.defaults_device_admin_authorization_exception_rule_update_ranks.rules, {}),
        i
      )]
    }
  )]
}

# Create device admin authorization exception rule update ranks
resource "ise_device_admin_authorization_exception_rule_update_ranks" "device_admin_authorization_exception_rule_update_ranks" {
  for_each = { for item in try(local.device_admin_authorization_exception_rule_update_ranks, []) : item.name => item }

  # General attributes
  policy_set_id = try(each.value.policy_set_id, null)
  rules = try([for i in each.value.rules : {
    id = try(i.id, null),
    rank = try(i.rank, null)
  }], null)
}
#
# ==================================================================
# DEVICE ADMIN POLICY SET UPDATE RANK 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | policy_set_id | String | True | Policy set ID |
# | rank | Int64 | True | The rank (priority) in relation to other rules. Lower rank is higher priority. |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_device_admin_policy_set_update_rank = try(local.defaults.ise.device_administration.device_admin_policy_set_update_rank, {})

  # Device Admin Policy Set Update Rank (with defaults)
  device_admin_policy_set_update_rank = [for item in try(local.ise.device_administration.device_admin_policy_set_update_rank, []) : merge(
    local.defaults_device_admin_policy_set_update_rank, # defaults
    item, # original item
    { # Nested merges for complex attributes
    }
  )]
}

# Create device admin policy set update rank
resource "ise_device_admin_policy_set_update_rank" "device_admin_policy_set_update_rank" {
  for_each = { for item in try(local.device_admin_policy_set_update_rank, []) : item.name => item }

  # General attributes
  policy_set_id = try(each.value.policy_set_id, null)
  rank = try(each.value.rank, null)
  
  lifecycle {
    ignore_changes = [policy_set_id]
  }
}
#
# ==================================================================
# DEVICE ADMIN AUTHORIZATION EXCEPTION RULE 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | policy_set_id | String | False | Policy set ID |
# | name | String | True | Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses] |
# | default | Bool | False | Indicates if this rule is the default one |
# | rank | Int64 | False | The rank (priority) in relation to other rules. Lower rank is higher priority. |
# | state | String | False | The state that the rule is in. A disabled rule cannot be matched. |
# | condition_type | String | False | Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute. |
# | condition_id | String | False | UUID for condition |
# | condition_is_negate | Bool | False | Indicates whereas this condition is in negate mode |
# | condition_attribute_name | String | False | Dictionary attribute name |
# | condition_attribute_value | String | False | Attribute value for condition. Value type is specified in dictionary object. |
# | condition_dictionary_name | String | False | Dictionary name |
# | condition_dictionary_value | String | False | Dictionary value |
# | condition_operator | String | False | Equality operator |
# | children | List | False | List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`. |
# | command_sets | Set | False | Command sets enforce the specified list of commands that can be executed by a device administrator |
# | profile | String | False | Device admin profiles control the initial login session of the device administrator |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_device_admin_authorization_exception_rule = try(local.defaults.ise.device_administration.device_admin_authorization_exception_rule, {})

  # Device Admin Authorization Exception Rule (with defaults)
  device_admin_authorization_exception_rule = [for item in try(local.ise.device_administration.device_admin_authorization_exception_rule, []) : merge(
    local.defaults_device_admin_authorization_exception_rule, # defaults
    item, # original item
    { # Nested merges for complex attributes
      children = [for i in try(item.children, []) : merge(
        try(local.defaults_device_admin_authorization_exception_rule.children, {}),
        i
      )]
    }
  )]
}

# Create device admin authorization exception rule
resource "ise_device_admin_authorization_exception_rule" "device_admin_authorization_exception_rule" {
  for_each = { for item in try(local.device_admin_authorization_exception_rule, []) : item.name => item }

  # General attributes
  policy_set_id = try(each.value.policy_set_id, null)
  name = try(each.value.name, null)
  default = try(each.value.default, null)
  rank = try(each.value.rank, null)
  state = try(each.value.state, null)
  condition_type = try(each.value.condition_type, null)
  condition_id = try(each.value.condition_id, null)
  condition_is_negate = try(each.value.condition_is_negate, null)
  condition_attribute_name = try(each.value.condition_attribute_name, null)
  condition_attribute_value = try(each.value.condition_attribute_value, null)
  condition_dictionary_name = try(each.value.condition_dictionary_name, null)
  condition_dictionary_value = try(each.value.condition_dictionary_value, null)
  condition_operator = try(each.value.condition_operator, null)
  children = try([for i in each.value.children : {
    condition_type = try(i.condition_type, null),
    id = try(i.id, null),
    is_negate = try(i.is_negate, null),
    attribute_name = try(i.attribute_name, null),
    attribute_value = try(i.attribute_value, null),
    dictionary_name = try(i.dictionary_name, null),
    dictionary_value = try(i.dictionary_value, null),
    operator = try(i.operator, null),
    children = try(i.children, null)
  }], null)
  command_sets = try(each.value.command_sets, null)
  profile = try(each.value.profile, null)
}
#
# ==================================================================
# TACACS COMMAND SET 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | name | String | True | The name of the TACACS command set |
# | description | String | False | Description |
# | permit_unmatched | Bool | False | Permit unmatched commands |
# | commands | List | False |  |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_tacacs_command_set = try(local.defaults.ise.device_administration.tacacs_command_set, {})

  # Tacacs Command Set (with defaults)
  tacacs_command_set = [for item in try(local.ise.device_administration.tacacs_command_set, []) : merge(
    local.defaults_tacacs_command_set, # defaults
    item, # original item
    { # Nested merges for complex attributes
      commands = [for i in try(item.commands, []) : merge(
        try(local.defaults_tacacs_command_set.commands, {}),
        i
      )]
    }
  )]
}

# Create tacacs command set
resource "ise_tacacs_command_set" "tacacs_command_set" {
  for_each = { for item in try(local.tacacs_command_set, []) : item.name => item }

  # General attributes
  name = try(each.value.name, null)
  description = try(each.value.description, null)
  permit_unmatched = try(each.value.permit_unmatched, null)
  commands = try([for i in each.value.commands : {
    grant = try(i.grant, null),
    command = try(i.command, null),
    arguments = try(i.arguments, null)
  }], null)
}
#
# ==================================================================
# DEVICE ADMIN AUTHENTICATION RULE UPDATE RANKS 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | policy_set_id | String | True | Policy set ID |
# | rules | List | False |  |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_device_admin_authentication_rule_update_ranks = try(local.defaults.ise.device_administration.device_admin_authentication_rule_update_ranks, {})

  # Device Admin Authentication Rule Update Ranks (with defaults)
  device_admin_authentication_rule_update_ranks = [for item in try(local.ise.device_administration.device_admin_authentication_rule_update_ranks, []) : merge(
    local.defaults_device_admin_authentication_rule_update_ranks, # defaults
    item, # original item
    { # Nested merges for complex attributes
      rules = [for i in try(item.rules, []) : merge(
        try(local.defaults_device_admin_authentication_rule_update_ranks.rules, {}),
        i
      )]
    }
  )]
}

# Create device admin authentication rule update ranks
resource "ise_device_admin_authentication_rule_update_ranks" "device_admin_authentication_rule_update_ranks" {
  for_each = { for item in try(local.device_admin_authentication_rule_update_ranks, []) : item.name => item }

  # General attributes
  policy_set_id = try(each.value.policy_set_id, null)
  rules = try([for i in each.value.rules : {
    id = try(i.id, null),
    rank = try(i.rank, null)
  }], null)
}
#
# ==================================================================
# DEVICE ADMIN AUTHORIZATION GLOBAL EXCEPTION RULE 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | name | String | True | Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses] |
# | rank | Int64 | False | The rank (priority) in relation to other rules. Lower rank is higher priority. |
# | state | String | False | The state that the rule is in. A disabled rule cannot be matched. |
# | condition_type | String | False | Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute. |
# | condition_id | String | False | UUID for condition |
# | condition_is_negate | Bool | False | Indicates whereas this condition is in negate mode |
# | condition_attribute_name | String | False | Dictionary attribute name |
# | condition_attribute_value | String | False | Attribute value for condition. Value type is specified in dictionary object. |
# | condition_dictionary_name | String | False | Dictionary name |
# | condition_dictionary_value | String | False | Dictionary value |
# | condition_operator | String | False | Equality operator |
# | children | List | False | List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`. |
# | command_sets | Set | False | Command sets enforce the specified list of commands that can be executed by a device administrator |
# | profile | String | False | Device admin profiles control the initial login session of the device administrator |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_device_admin_authorization_global_exception_rule = try(local.defaults.ise.device_administration.device_admin_authorization_global_exception_rule, {})

  # Device Admin Authorization Global Exception Rule (with defaults)
  device_admin_authorization_global_exception_rule = [for item in try(local.ise.device_administration.device_admin_authorization_global_exception_rule, []) : merge(
    local.defaults_device_admin_authorization_global_exception_rule, # defaults
    item, # original item
    { # Nested merges for complex attributes
      children = [for i in try(item.children, []) : merge(
        try(local.defaults_device_admin_authorization_global_exception_rule.children, {}),
        i
      )]
    }
  )]
}

# Create device admin authorization global exception rule
resource "ise_device_admin_authorization_global_exception_rule" "device_admin_authorization_global_exception_rule" {
  for_each = { for item in try(local.device_admin_authorization_global_exception_rule, []) : item.name => item }

  # General attributes
  name = try(each.value.name, null)
  rank = try(each.value.rank, null)
  state = try(each.value.state, null)
  condition_type = try(each.value.condition_type, null)
  condition_id = try(each.value.condition_id, null)
  condition_is_negate = try(each.value.condition_is_negate, null)
  condition_attribute_name = try(each.value.condition_attribute_name, null)
  condition_attribute_value = try(each.value.condition_attribute_value, null)
  condition_dictionary_name = try(each.value.condition_dictionary_name, null)
  condition_dictionary_value = try(each.value.condition_dictionary_value, null)
  condition_operator = try(each.value.condition_operator, null)
  children = try([for i in each.value.children : {
    condition_type = try(i.condition_type, null),
    id = try(i.id, null),
    is_negate = try(i.is_negate, null),
    attribute_name = try(i.attribute_name, null),
    attribute_value = try(i.attribute_value, null),
    dictionary_name = try(i.dictionary_name, null),
    dictionary_value = try(i.dictionary_value, null),
    operator = try(i.operator, null),
    children = try(i.children, null)
  }], null)
  command_sets = try(each.value.command_sets, null)
  profile = try(each.value.profile, null)
}
#
# ==================================================================
# DEVICE ADMIN AUTHORIZATION RULE 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | policy_set_id | String | False | Policy set ID |
# | name | String | True | Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses] |
# | default | Bool | False | Indicates if this rule is the default one |
# | rank | Int64 | False | The rank (priority) in relation to other rules. Lower rank is higher priority. |
# | state | String | False | The state that the rule is in. A disabled rule cannot be matched. |
# | condition_type | String | False | Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute. |
# | condition_id | String | False | UUID for condition |
# | condition_is_negate | Bool | False | Indicates whereas this condition is in negate mode |
# | condition_attribute_name | String | False | Dictionary attribute name |
# | condition_attribute_value | String | False | Attribute value for condition. Value type is specified in dictionary object. |
# | condition_dictionary_name | String | False | Dictionary name |
# | condition_dictionary_value | String | False | Dictionary value |
# | condition_operator | String | False | Equality operator |
# | children | List | False | List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`. |
# | command_sets | Set | False | Command sets enforce the specified list of commands that can be executed by a device administrator |
# | profile | String | False | Device admin profiles control the initial login session of the device administrator |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_device_admin_authorization_rule = try(local.defaults.ise.device_administration.device_admin_authorization_rule, {})

  # Device Admin Authorization Rule (with defaults)
  device_admin_authorization_rule = [for item in try(local.ise.device_administration.device_admin_authorization_rule, []) : merge(
    local.defaults_device_admin_authorization_rule, # defaults
    item, # original item
    { # Nested merges for complex attributes
      children = [for i in try(item.children, []) : merge(
        try(local.defaults_device_admin_authorization_rule.children, {}),
        i
      )]
    }
  )]
}

# Create device admin authorization rule
resource "ise_device_admin_authorization_rule" "device_admin_authorization_rule" {
  for_each = { for item in try(local.device_admin_authorization_rule, []) : item.name => item }

  # General attributes
  policy_set_id = try(each.value.policy_set_id, null)
  name = try(each.value.name, null)
  default = try(each.value.default, null)
  rank = try(each.value.rank, null)
  state = try(each.value.state, null)
  condition_type = try(each.value.condition_type, null)
  condition_id = try(each.value.condition_id, null)
  condition_is_negate = try(each.value.condition_is_negate, null)
  condition_attribute_name = try(each.value.condition_attribute_name, null)
  condition_attribute_value = try(each.value.condition_attribute_value, null)
  condition_dictionary_name = try(each.value.condition_dictionary_name, null)
  condition_dictionary_value = try(each.value.condition_dictionary_value, null)
  condition_operator = try(each.value.condition_operator, null)
  children = try([for i in each.value.children : {
    condition_type = try(i.condition_type, null),
    id = try(i.id, null),
    is_negate = try(i.is_negate, null),
    attribute_name = try(i.attribute_name, null),
    attribute_value = try(i.attribute_value, null),
    dictionary_name = try(i.dictionary_name, null),
    dictionary_value = try(i.dictionary_value, null),
    operator = try(i.operator, null),
    children = try(i.children, null)
  }], null)
  command_sets = try(each.value.command_sets, null)
  profile = try(each.value.profile, null)
}
#
# ==================================================================
# DEVICE ADMIN AUTHORIZATION RULE UPDATE RANKS 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | policy_set_id | String | True | Policy set ID |
# | rules | List | False |  |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_device_admin_authorization_rule_update_ranks = try(local.defaults.ise.device_administration.device_admin_authorization_rule_update_ranks, {})

  # Device Admin Authorization Rule Update Ranks (with defaults)
  device_admin_authorization_rule_update_ranks = [for item in try(local.ise.device_administration.device_admin_authorization_rule_update_ranks, []) : merge(
    local.defaults_device_admin_authorization_rule_update_ranks, # defaults
    item, # original item
    { # Nested merges for complex attributes
      rules = [for i in try(item.rules, []) : merge(
        try(local.defaults_device_admin_authorization_rule_update_ranks.rules, {}),
        i
      )]
    }
  )]
}

# Create device admin authorization rule update ranks
resource "ise_device_admin_authorization_rule_update_ranks" "device_admin_authorization_rule_update_ranks" {
  for_each = { for item in try(local.device_admin_authorization_rule_update_ranks, []) : item.name => item }

  # General attributes
  policy_set_id = try(each.value.policy_set_id, null)
  rules = try([for i in each.value.rules : {
    id = try(i.id, null),
    rank = try(i.rank, null)
  }], null)
}
#
# ==================================================================
# DEVICE ADMIN TIME AND DATE CONDITION 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | name | String | True | Condition name |
# | description | String | False | Condition description |
# | is_negate | Bool | False | Indicates whereas this condition is in negate mode |
# | week_days | Set | False | Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days. |
# | week_days_exception | Set | False | Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. |
# | start_date | String | False | Start date |
# | end_date | String | False | End date |
# | exception_start_date | String | False | Exception start date |
# | exception_end_date | String | False | Exception end date |
# | start_time | String | False | Start time |
# | end_time | String | False | End time |
# | exception_start_time | String | False | Exception start time |
# | exception_end_time | String | False | Exception end time |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_device_admin_time_and_date_condition = try(local.defaults.ise.device_administration.device_admin_time_and_date_condition, {})

  # Device Admin Time And Date Condition (with defaults)
  device_admin_time_and_date_condition = [for item in try(local.ise.device_administration.device_admin_time_and_date_condition, []) : merge(
    local.defaults_device_admin_time_and_date_condition, # defaults
    item, # original item
    { # Nested merges for complex attributes
    }
  )]
}

# Create device admin time and date condition
resource "ise_device_admin_time_and_date_condition" "device_admin_time_and_date_condition" {
  for_each = { for item in try(local.device_admin_time_and_date_condition, []) : item.name => item }

  # General attributes
  name = try(each.value.name, null)
  description = try(each.value.description, null)
  is_negate = try(each.value.is_negate, null)
  week_days = try(each.value.week_days, null)
  week_days_exception = try(each.value.week_days_exception, null)
  start_date = try(each.value.start_date, null)
  end_date = try(each.value.end_date, null)
  exception_start_date = try(each.value.exception_start_date, null)
  exception_end_date = try(each.value.exception_end_date, null)
  start_time = try(each.value.start_time, null)
  end_time = try(each.value.end_time, null)
  exception_start_time = try(each.value.exception_start_time, null)
  exception_end_time = try(each.value.exception_end_time, null)
}
