#
# ################################################################################
#
# This file was automatically generated with ./gen/generate_module.py
#          Do not edit this file directly.
#          More information in repository README.md
#
# ################################################################################
#
#
# ==================================================================
# ALLOWED PROTOCOLS 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | name | String | True | The name of the allowed protocols |
# | description | String | False | Description |
# | process_host_lookup | Bool | True | Process host lookup |
# | allow_pap_ascii | Bool | True | Allow PAP ASCII |
# | allow_chap | Bool | True | Allow CHAP |
# | allow_ms_chap_v1 | Bool | True | Allow MS CHAP v1 |
# | allow_ms_chap_v2 | Bool | True | Allow MS CHAP v2 |
# | allow_eap_md5 | Bool | True | Allow EAP MD5 |
# | allow_leap | Bool | True | Allow LEAP |
# | allow_eap_tls | Bool | True | Allow EAP TLS |
# | allow_eap_ttls | Bool | True | Allow EAP TTLS |
# | allow_eap_fast | Bool | True | Allow EAP Fast |
# | allow_peap | Bool | True | Allow PEAP |
# | allow_teap | Bool | True | Allow TEAP |
# | allow_preferred_eap_protocol | Bool | True | Allow preferred EAP protocol |
# | preferred_eap_protocol | String | False | Preferred EAP protocol |
# | eap_tls_l_bit | Bool | True | EAP TLS L-Bit |
# | allow_weak_ciphers_for_eap | Bool | True | Allow weak ciphers for EAP |
# | require_message_auth | Bool | True | Require message authentication |
# | eap_tls_allow_auth_of_expired_certs | Bool | False | Allow authentication of expired certificates |
# | eap_tls_enable_stateless_session_resume | Bool | False | Enable stateless session resume |
# | eap_tls_session_ticket_ttl | Int64 | False | Session ticket TTL. Is required only if `eap_tls_enable_stateless_session_resume` is `true`. |
# | eap_tls_session_ticket_ttl_unit | String | False | Session ticket TTL unit. Is required only if `eap_tls_enable_stateless_session_resume` is `true`. |
# | eap_tls_session_ticket_percentage | Int64 | False | Session ticket percentage. Is required only if `eap_tls_enable_stateless_session_resume` is `true`. |
# | peap_allow_peap_eap_ms_chap_v2 | Bool | False | Allow PEAP EAP MS CHAP v2 |
# | peap_allow_peap_eap_ms_chap_v2_pwd_change | Bool | False | Allow PEAP EAP MS CHAP v2 password change. Is required only if `allow_peap_eap_ms_chap_v2` is `true`. |
# | peap_allow_peap_eap_ms_chap_v2_pwd_change_retries | Int64 | False | Allow PEAP EAP MS CHAP v2 password change retries. Is required only if `allow_peap_eap_ms_chap_v2` is `true`. |
# | peap_allow_peap_eap_gtc | Bool | False | Allow PEAP EAP GTC |
# | peap_allow_peap_eap_gtc_pwd_change | Bool | False | Allow PEAP EAP GTC password change. Is required only if `allow_peap_eap_gtc` is `true`. |
# | peap_allow_peap_eap_gtc_pwd_change_retries | Int64 | False | PEAP EAP GTC password change retries. Is required only if `allow_peap_eap_gtc` is `true`. |
# | peap_allow_peap_eap_tls | Bool | False | Allow PEAP EAP TLS |
# | peap_allow_peap_eap_tls_auth_of_expired_certs | Bool | False | Allow PEAP EAP TLS authentication of expired certificates. Is required only if `peap_allow_peap_eap_tls` is `true`. |
# | require_cryptobinding | Bool | False | Require cryptobinding |
# | peap_peap_v0 | Bool | False | Allow PEAP v0 |
# | eap_ttls_pap_ascii | Bool | False | Allow PAP ASCII |
# | eap_ttls_chap | Bool | False | Allow CHAP |
# | eap_ttls_ms_chap_v1 | Bool | False | Allow MS CHAP v1 |
# | eap_ttls_ms_chap_v2 | Bool | False | Allow MS CHAP v2 |
# | eap_ttls_eap_md5 | Bool | False | Allow EAP MD5 |
# | eap_ttls_eap_ms_chap_v2 | Bool | False | Allow EAP MS CHAP v2 |
# | eap_ttls_eap_ms_chap_v2_pwd_change | Bool | False | Allow EAP MS CHAP v2 password change. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`. |
# | eap_ttls_eap_ms_chap_v2_pwd_change_retries | Int64 | False | EAP MS CHAP v2 password change retries. Is required only if `eap_ttls_eap_ms_chap_v2` is `true`. |
# | eap_fast_eap_ms_chap_v2 | Bool | False | Allow EAP MS CHAP v2 |
# | eap_fast_eap_ms_chap_v2_pwd_change | Bool | False | Allow EAP MS CHAP v2 password change. Is required only if `eap_fast_eap_ms_chap_v2` is `true`. |
# | eap_fast_eap_ms_chap_v2_pwd_change_retries | Int64 | False | EAP MS CHAP v2 password change retries. Is required only if `eap_fast_eap_ms_chap_v2` is `true`. |
# | eap_fast_eap_gtc | Bool | False | Allow EAP GTC |
# | eap_fast_eap_gtc_pwd_change | Bool | False | Allow EAP GTC password change. Is required only if `eap_fast_eap_gtc` is `true`. |
# | eap_fast_eap_gtc_pwd_change_retries | Int64 | False | EAP GTC password change retries. Is required only if `eap_fast_eap_gtc` is `true`. |
# | eap_fast_eap_tls | Bool | False | Allow EAP TLS |
# | eap_fast_eap_tls_auth_of_expired_certs | Bool | False | Allow EAP TLS authentication of expired certificates. Is required only if `eap_fast_eap_tls` is `true`. |
# | eap_fast_enable_eap_chaining | Bool | False | Enable EAP chaining |
# | eap_fast_use_pacs | Bool | False | Use PACs |
# | eap_fast_pacs_tunnel_pac_ttl | Int64 | False | PACs tunnel PAC time to live. Is required only if `eap_fast_use_pacs` is `true`. |
# | eap_fast_pacs_tunnel_pac_ttl_unit | String | False | PACs tunnel PAC time to live unit. Is required only if `eap_fast_use_pacs` is `true`. |
# | eap_fast_pacs_use_proactive_pac_update_percentage | Int64 | False | Use proactive pac update percentage. Is required only if `eap_fast_use_pacs` is `true`. |
# | eap_fast_pacs_allow_anonymous_provisioning | Bool | False | Allow anonymous provisioning. Is required only if `eap_fast_use_pacs` is `true`. |
# | eap_fast_pacs_allow_authenticated_provisioning | Bool | False | Allow authenticated provisioning. Is required only if `eap_fast_use_pacs` is `true`. |
# | eap_fast_pacs_server_returns | Bool | False | Server returns access accept after authenticated provisioning. Is required only if `eap_fast_pacs_allow_authenticated_provisioning` is `true`. |
# | eap_fast_pacs_allow_client_cert | Bool | False | Accept client certification for provisioning. Is required only if `eap_fast_pacs_allow_authenticated_provisioning` is `true`. |
# | eap_fast_pacs_allow_machine_authentication | Bool | False | Allow machine authentication. Is required only if `eap_fast_use_pacs` is `true`. |
# | eap_fast_pacs_machine_pac_ttl | Int64 | False | Machine PAC TTL. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`. |
# | eap_fast_pacs_machine_pac_ttl_unit | String | False | Machine PAC TTL unit. Is required only if `eap_fast_pacs_allow_machine_authentication` is `true`. |
# | eap_fast_pacs_stateless_session_resume | Bool | False | Stateless session resume. Is required only if `eap_fast_use_pacs` is `true`. |
# | eap_fast_pacs_authorization_pac_ttl | Int64 | False | Authorization PAC TTL. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`. |
# | eap_fast_pacs_authorization_pac_ttl_unit | String | False | Authorization PAC TTL unit. Is required only if `eap_fast_pacs_stateless_session_resume` is `true`. |
# | eap_fast_accept_client_cert | Bool | False | Accept client certificates. Is required only if `eap_fast_use_pacs` is `false`. |
# | eap_fast_allow_machine_authentication | Bool | False | Allow machine authentication. Is required only if `eap_fast_use_pacs` is `false`. |
# | teap_eap_ms_chap_v2 | Bool | False | Allow EAP MS CHAP v2 |
# | teap_eap_ms_chap_v2_pwd_change | Bool | False | Allow EAP MS CHAP v2 password change. Is required only if `teap_eap_ms_chap_v2` is `true`. |
# | teap_eap_ms_chap_v2_pwd_change_retries | Int64 | False | EAP MS CHAP v2 password change retries. Is required only if `teap_eap_ms_chap_v2` is `true`. |
# | teap_eap_tls | Bool | False | Allow EAP TLS |
# | teap_eap_tls_auth_of_expired_certs | Bool | False | Allow EAP TLS authentication of expired certs. Is required only if `teap_eap_tls` is `true`. |
# | teap_eap_accept_client_cert_during_tunnel_est | Bool | False | Accept client certificate during tunnel establishment |
# | teap_eap_chaining | Bool | False | Allow EAP chaining |
# | teap_downgrade_msk | Bool | False | Allow downgrade to MSK |
# | teap_request_basic_pwd_auth | Bool | False | Request basic password authentication |
# | allow_5g | Bool | False | Allow 5G. This field is only supported from ISE 3.2. |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_allowed_protocols = try(local.defaults.ise.network_access.allowed_protocols, {})

  # Allowed Protocols (with defaults)
  allowed_protocols = [for item in try(local.ise.network_access.allowed_protocols, []) : merge(
    local.defaults_allowed_protocols, # defaults
    item, # original item
    { # Nested merges for complex attributes
    }
  )]
}

# Create allowed protocols
resource "ise_allowed_protocols" "allowed_protocols" {
  for_each = { for item in try(local.allowed_protocols, []) : item.name => item }

  # General attributes
  name = try(each.value.name, null)
  description = try(each.value.description, null)
  process_host_lookup = try(each.value.process_host_lookup, null)
  allow_pap_ascii = try(each.value.allow_pap_ascii, null)
  allow_chap = try(each.value.allow_chap, null)
  allow_ms_chap_v1 = try(each.value.allow_ms_chap_v1, null)
  allow_ms_chap_v2 = try(each.value.allow_ms_chap_v2, null)
  allow_eap_md5 = try(each.value.allow_eap_md5, null)
  allow_leap = try(each.value.allow_leap, null)
  allow_eap_tls = try(each.value.allow_eap_tls, null)
  allow_eap_ttls = try(each.value.allow_eap_ttls, null)
  allow_eap_fast = try(each.value.allow_eap_fast, null)
  allow_peap = try(each.value.allow_peap, null)
  allow_teap = try(each.value.allow_teap, null)
  allow_preferred_eap_protocol = try(each.value.allow_preferred_eap_protocol, null)
  preferred_eap_protocol = try(each.value.preferred_eap_protocol, null)
  eap_tls_l_bit = try(each.value.eap_tls_l_bit, null)
  allow_weak_ciphers_for_eap = try(each.value.allow_weak_ciphers_for_eap, null)
  require_message_auth = try(each.value.require_message_auth, null)
  eap_tls_allow_auth_of_expired_certs = try(each.value.eap_tls_allow_auth_of_expired_certs, null)
  eap_tls_enable_stateless_session_resume = try(each.value.eap_tls_enable_stateless_session_resume, null)
  eap_tls_session_ticket_ttl = try(each.value.eap_tls_session_ticket_ttl, null)
  eap_tls_session_ticket_ttl_unit = try(each.value.eap_tls_session_ticket_ttl_unit, null)
  eap_tls_session_ticket_percentage = try(each.value.eap_tls_session_ticket_percentage, null)
  peap_allow_peap_eap_ms_chap_v2 = try(each.value.peap_allow_peap_eap_ms_chap_v2, null)
  peap_allow_peap_eap_ms_chap_v2_pwd_change = try(each.value.peap_allow_peap_eap_ms_chap_v2_pwd_change, null)
  peap_allow_peap_eap_ms_chap_v2_pwd_change_retries = try(each.value.peap_allow_peap_eap_ms_chap_v2_pwd_change_retries, null)
  peap_allow_peap_eap_gtc = try(each.value.peap_allow_peap_eap_gtc, null)
  peap_allow_peap_eap_gtc_pwd_change = try(each.value.peap_allow_peap_eap_gtc_pwd_change, null)
  peap_allow_peap_eap_gtc_pwd_change_retries = try(each.value.peap_allow_peap_eap_gtc_pwd_change_retries, null)
  peap_allow_peap_eap_tls = try(each.value.peap_allow_peap_eap_tls, null)
  peap_allow_peap_eap_tls_auth_of_expired_certs = try(each.value.peap_allow_peap_eap_tls_auth_of_expired_certs, null)
  require_cryptobinding = try(each.value.require_cryptobinding, null)
  peap_peap_v0 = try(each.value.peap_peap_v0, null)
  eap_ttls_pap_ascii = try(each.value.eap_ttls_pap_ascii, null)
  eap_ttls_chap = try(each.value.eap_ttls_chap, null)
  eap_ttls_ms_chap_v1 = try(each.value.eap_ttls_ms_chap_v1, null)
  eap_ttls_ms_chap_v2 = try(each.value.eap_ttls_ms_chap_v2, null)
  eap_ttls_eap_md5 = try(each.value.eap_ttls_eap_md5, null)
  eap_ttls_eap_ms_chap_v2 = try(each.value.eap_ttls_eap_ms_chap_v2, null)
  eap_ttls_eap_ms_chap_v2_pwd_change = try(each.value.eap_ttls_eap_ms_chap_v2_pwd_change, null)
  eap_ttls_eap_ms_chap_v2_pwd_change_retries = try(each.value.eap_ttls_eap_ms_chap_v2_pwd_change_retries, null)
  eap_fast_eap_ms_chap_v2 = try(each.value.eap_fast_eap_ms_chap_v2, null)
  eap_fast_eap_ms_chap_v2_pwd_change = try(each.value.eap_fast_eap_ms_chap_v2_pwd_change, null)
  eap_fast_eap_ms_chap_v2_pwd_change_retries = try(each.value.eap_fast_eap_ms_chap_v2_pwd_change_retries, null)
  eap_fast_eap_gtc = try(each.value.eap_fast_eap_gtc, null)
  eap_fast_eap_gtc_pwd_change = try(each.value.eap_fast_eap_gtc_pwd_change, null)
  eap_fast_eap_gtc_pwd_change_retries = try(each.value.eap_fast_eap_gtc_pwd_change_retries, null)
  eap_fast_eap_tls = try(each.value.eap_fast_eap_tls, null)
  eap_fast_eap_tls_auth_of_expired_certs = try(each.value.eap_fast_eap_tls_auth_of_expired_certs, null)
  eap_fast_enable_eap_chaining = try(each.value.eap_fast_enable_eap_chaining, null)
  eap_fast_use_pacs = try(each.value.eap_fast_use_pacs, null)
  eap_fast_pacs_tunnel_pac_ttl = try(each.value.eap_fast_pacs_tunnel_pac_ttl, null)
  eap_fast_pacs_tunnel_pac_ttl_unit = try(each.value.eap_fast_pacs_tunnel_pac_ttl_unit, null)
  eap_fast_pacs_use_proactive_pac_update_percentage = try(each.value.eap_fast_pacs_use_proactive_pac_update_percentage, null)
  eap_fast_pacs_allow_anonymous_provisioning = try(each.value.eap_fast_pacs_allow_anonymous_provisioning, null)
  eap_fast_pacs_allow_authenticated_provisioning = try(each.value.eap_fast_pacs_allow_authenticated_provisioning, null)
  eap_fast_pacs_server_returns = try(each.value.eap_fast_pacs_server_returns, null)
  eap_fast_pacs_allow_client_cert = try(each.value.eap_fast_pacs_allow_client_cert, null)
  eap_fast_pacs_allow_machine_authentication = try(each.value.eap_fast_pacs_allow_machine_authentication, null)
  eap_fast_pacs_machine_pac_ttl = try(each.value.eap_fast_pacs_machine_pac_ttl, null)
  eap_fast_pacs_machine_pac_ttl_unit = try(each.value.eap_fast_pacs_machine_pac_ttl_unit, null)
  eap_fast_pacs_stateless_session_resume = try(each.value.eap_fast_pacs_stateless_session_resume, null)
  eap_fast_pacs_authorization_pac_ttl = try(each.value.eap_fast_pacs_authorization_pac_ttl, null)
  eap_fast_pacs_authorization_pac_ttl_unit = try(each.value.eap_fast_pacs_authorization_pac_ttl_unit, null)
  eap_fast_accept_client_cert = try(each.value.eap_fast_accept_client_cert, null)
  eap_fast_allow_machine_authentication = try(each.value.eap_fast_allow_machine_authentication, null)
  teap_eap_ms_chap_v2 = try(each.value.teap_eap_ms_chap_v2, null)
  teap_eap_ms_chap_v2_pwd_change = try(each.value.teap_eap_ms_chap_v2_pwd_change, null)
  teap_eap_ms_chap_v2_pwd_change_retries = try(each.value.teap_eap_ms_chap_v2_pwd_change_retries, null)
  teap_eap_tls = try(each.value.teap_eap_tls, null)
  teap_eap_tls_auth_of_expired_certs = try(each.value.teap_eap_tls_auth_of_expired_certs, null)
  teap_eap_accept_client_cert_during_tunnel_est = try(each.value.teap_eap_accept_client_cert_during_tunnel_est, null)
  teap_eap_chaining = try(each.value.teap_eap_chaining, null)
  teap_downgrade_msk = try(each.value.teap_downgrade_msk, null)
  teap_request_basic_pwd_auth = try(each.value.teap_request_basic_pwd_auth, null)
  allow_5g = try(each.value.allow_5g, null)
  
  lifecycle {
    ignore_changes = [teap_request_basic_pwd_auth]
  }
}
#
# ==================================================================
# NETWORK ACCESS POLICY SET UPDATE RANK 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | policy_set_id | String | True | Policy set ID |
# | rank | Int64 | True | The rank (priority) in relation to other rules. Lower rank is higher priority. |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_network_access_policy_set_update_rank = try(local.defaults.ise.network_access.network_access_policy_set_update_rank, {})

  # Network Access Policy Set Update Rank (with defaults)
  network_access_policy_set_update_rank = [for item in try(local.ise.network_access.network_access_policy_set_update_rank, []) : merge(
    local.defaults_network_access_policy_set_update_rank, # defaults
    item, # original item
    { # Nested merges for complex attributes
    }
  )]
}

# Create network access policy set update rank
resource "ise_network_access_policy_set_update_rank" "network_access_policy_set_update_rank" {
  for_each = { for item in try(local.network_access_policy_set_update_rank, []) : item.name => item }

  # General attributes
  policy_set_id = try(each.value.policy_set_id, null)
  rank = try(each.value.rank, null)
  
  lifecycle {
    ignore_changes = [policy_set_id]
  }
}
#
# ==================================================================
# NETWORK ACCESS CONDITION 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | name | String | True | Condition name |
# | description | String | False | Condition description |
# | condition_type | String | True | Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute. |
# | is_negate | Bool | False | Indicates whereas this condition is in negate mode |
# | attribute_name | String | False | Dictionary attribute name |
# | attribute_value | String | False | Attribute value for condition. Value type is specified in dictionary object. |
# | dictionary_name | String | False | Dictionary name |
# | dictionary_value | String | False | Dictionary value |
# | operator | String | False | Equality operator |
# | children | List | False | List of child conditions. `condition_type` must be one of `LibraryConditionAndBlock` or `LibraryConditionOrBlock`. |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_network_access_condition = try(local.defaults.ise.network_access.network_access_condition, {})

  # Network Access Condition (with defaults)
  network_access_condition = [for item in try(local.ise.network_access.network_access_condition, []) : merge(
    local.defaults_network_access_condition, # defaults
    item, # original item
    { # Nested merges for complex attributes
      children = [for i in try(item.children, []) : merge(
        try(local.defaults_network_access_condition.children, {}),
        i
      )]
    }
  )]
}

# Create network access condition
resource "ise_network_access_condition" "network_access_condition" {
  for_each = { for item in try(local.network_access_condition, []) : item.name => item }

  # General attributes
  name = try(each.value.name, null)
  description = try(each.value.description, null)
  condition_type = try(each.value.condition_type, null)
  is_negate = try(each.value.is_negate, null)
  attribute_name = try(each.value.attribute_name, null)
  attribute_value = try(each.value.attribute_value, null)
  dictionary_name = try(each.value.dictionary_name, null)
  dictionary_value = try(each.value.dictionary_value, null)
  operator = try(each.value.operator, null)
  children = try([for i in each.value.children : {
    name = try(i.name, null),
    description = try(i.description, null),
    condition_type = try(i.condition_type, null),
    id = try(i.id, null),
    is_negate = try(i.is_negate, null),
    attribute_name = try(i.attribute_name, null),
    attribute_value = try(i.attribute_value, null),
    dictionary_name = try(i.dictionary_name, null),
    dictionary_value = try(i.dictionary_value, null),
    operator = try(i.operator, null),
    children = try(i.children, null)
  }], null)
  
  lifecycle {
    ignore_changes = []
  }
}
#
# ==================================================================
# NETWORK ACCESS TIME AND DATE CONDITION 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | name | String | True | Condition name |
# | description | String | False | Condition description |
# | is_negate | Bool | False | Indicates whereas this condition is in negate mode |
# | week_days | Set | False | Defines for which days this condition will be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. Default - List of all week days. |
# | week_days_exception | Set | False | Defines for which days this condition will NOT be matched. List of weekdays - `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, `Sunday`. |
# | start_date | String | False | Start date |
# | end_date | String | False | End date |
# | exception_start_date | String | False | Exception start date |
# | exception_end_date | String | False | Exception end date |
# | start_time | String | False | Start time |
# | end_time | String | False | End time |
# | exception_start_time | String | False | Exception start time |
# | exception_end_time | String | False | Exception end time |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_network_access_time_and_date_condition = try(local.defaults.ise.network_access.network_access_time_and_date_condition, {})

  # Network Access Time And Date Condition (with defaults)
  network_access_time_and_date_condition = [for item in try(local.ise.network_access.network_access_time_and_date_condition, []) : merge(
    local.defaults_network_access_time_and_date_condition, # defaults
    item, # original item
    { # Nested merges for complex attributes
    }
  )]
}

# Create network access time and date condition
resource "ise_network_access_time_and_date_condition" "network_access_time_and_date_condition" {
  for_each = { for item in try(local.network_access_time_and_date_condition, []) : item.name => item }

  # General attributes
  name = try(each.value.name, null)
  description = try(each.value.description, null)
  is_negate = try(each.value.is_negate, null)
  week_days = try(each.value.week_days, null)
  week_days_exception = try(each.value.week_days_exception, null)
  start_date = try(each.value.start_date, null)
  end_date = try(each.value.end_date, null)
  exception_start_date = try(each.value.exception_start_date, null)
  exception_end_date = try(each.value.exception_end_date, null)
  start_time = try(each.value.start_time, null)
  end_time = try(each.value.end_time, null)
  exception_start_time = try(each.value.exception_start_time, null)
  exception_end_time = try(each.value.exception_end_time, null)
  
  lifecycle {
    ignore_changes = []
  }
}
#
# ==================================================================
# NETWORK ACCESS AUTHORIZATION EXCEPTION RULE UPDATE RANKS 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | policy_set_id | String | True | Policy set ID |
# | rules | List | False |  |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_network_access_authorization_exception_rule_update_ranks = try(local.defaults.ise.network_access.network_access_authorization_exception_rule_update_ranks, {})

  # Network Access Authorization Exception Rule Update Ranks (with defaults)
  network_access_authorization_exception_rule_update_ranks = [for item in try(local.ise.network_access.network_access_authorization_exception_rule_update_ranks, []) : merge(
    local.defaults_network_access_authorization_exception_rule_update_ranks, # defaults
    item, # original item
    { # Nested merges for complex attributes
      rules = [for i in try(item.rules, []) : merge(
        try(local.defaults_network_access_authorization_exception_rule_update_ranks.rules, {}),
        i
      )]
    }
  )]
}

# Create network access authorization exception rule update ranks
resource "ise_network_access_authorization_exception_rule_update_ranks" "network_access_authorization_exception_rule_update_ranks" {
  for_each = { for item in try(local.network_access_authorization_exception_rule_update_ranks, []) : item.name => item }

  # General attributes
  policy_set_id = try(each.value.policy_set_id, null)
  rules = try([for i in each.value.rules : {
    id = try(i.id, null),
    rank = try(i.rank, null)
  }], null)
  
  lifecycle {
    ignore_changes = []
  }
}
#
# ==================================================================
# NETWORK ACCESS AUTHENTICATION RULE 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | policy_set_id | String | False | Policy set ID |
# | name | String | True | Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses] |
# | default | Bool | False | Indicates if this rule is the default one |
# | rank | Int64 | False | The rank (priority) in relation to other rules. Lower rank is higher priority. |
# | state | String | False | The state that the rule is in. A disabled rule cannot be matched. |
# | condition_type | String | False | Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute. |
# | condition_id | String | False | UUID for condition |
# | condition_is_negate | Bool | False | Indicates whereas this condition is in negate mode |
# | condition_attribute_name | String | False | Dictionary attribute name |
# | condition_attribute_value | String | False | Attribute value for condition. Value type is specified in dictionary object. |
# | condition_dictionary_name | String | False | Dictionary name |
# | condition_dictionary_value | String | False | Dictionary value |
# | condition_operator | String | False | Equality operator |
# | children | List | False | List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`. |
# | identity_source_name | String | False | Identity source name from the identity stores |
# | if_auth_fail | String | True | Action to perform when authentication fails such as Bad credentials, disabled user and so on |
# | if_process_fail | String | True | Action to perform when ISE is uanble to access the identity database |
# | if_user_not_found | String | True | Action to perform when user is not found in any of identity stores |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_network_access_authentication_rule = try(local.defaults.ise.network_access.network_access_authentication_rule, {})

  # Network Access Authentication Rule (with defaults)
  network_access_authentication_rule = [for item in try(local.ise.network_access.network_access_authentication_rule, []) : merge(
    local.defaults_network_access_authentication_rule, # defaults
    item, # original item
    { # Nested merges for complex attributes
      children = [for i in try(item.children, []) : merge(
        try(local.defaults_network_access_authentication_rule.children, {}),
        i
      )]
    }
  )]
}

# Create network access authentication rule
resource "ise_network_access_authentication_rule" "network_access_authentication_rule" {
  for_each = { for item in try(local.network_access_authentication_rule, []) : item.name => item }

  # General attributes
  policy_set_id = try(each.value.policy_set_id, null)
  name = try(each.value.name, null)
  default = try(each.value.default, null)
  rank = try(each.value.rank, null)
  state = try(each.value.state, null)
  condition_type = try(each.value.condition_type, null)
  condition_id = try(each.value.condition_id, null)
  condition_is_negate = try(each.value.condition_is_negate, null)
  condition_attribute_name = try(each.value.condition_attribute_name, null)
  condition_attribute_value = try(each.value.condition_attribute_value, null)
  condition_dictionary_name = try(each.value.condition_dictionary_name, null)
  condition_dictionary_value = try(each.value.condition_dictionary_value, null)
  condition_operator = try(each.value.condition_operator, null)
  children = try([for i in each.value.children : {
    condition_type = try(i.condition_type, null),
    id = try(i.id, null),
    is_negate = try(i.is_negate, null),
    attribute_name = try(i.attribute_name, null),
    attribute_value = try(i.attribute_value, null),
    dictionary_name = try(i.dictionary_name, null),
    dictionary_value = try(i.dictionary_value, null),
    operator = try(i.operator, null),
    children = try(i.children, null)
  }], null)
  identity_source_name = try(each.value.identity_source_name, null)
  if_auth_fail = try(each.value.if_auth_fail, null)
  if_process_fail = try(each.value.if_process_fail, null)
  if_user_not_found = try(each.value.if_user_not_found, null)
  
  lifecycle {
    ignore_changes = []
  }
}
#
# ==================================================================
# DOWNLOADABLE ACL 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | name | String | True | The name of the downloadable ACL |
# | description | String | False | Description |
# | dacl | String | True | The DACL content |
# | dacl_type | String | False | The type of ACL |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_downloadable_acl = try(local.defaults.ise.network_access.downloadable_acl, {})

  # Downloadable Acl (with defaults)
  downloadable_acl = [for item in try(local.ise.network_access.downloadable_acl, []) : merge(
    local.defaults_downloadable_acl, # defaults
    item, # original item
    { # Nested merges for complex attributes
    }
  )]
}

# Create downloadable acl
resource "ise_downloadable_acl" "downloadable_acl" {
  for_each = { for item in try(local.downloadable_acl, []) : item.name => item }

  # General attributes
  name = try(each.value.name, null)
  description = try(each.value.description, null)
  dacl = try(each.value.dacl, null)
  dacl_type = try(each.value.dacl_type, null)
  
  lifecycle {
    ignore_changes = []
  }
}
#
# ==================================================================
# NETWORK ACCESS AUTHORIZATION RULE UPDATE RANK 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | rule_id | String | True | Authorization rule ID |
# | policy_set_id | String | False | Policy set ID |
# | rank | Int64 | True | The rank (priority) in relation to other rules. Lower rank is higher priority. |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_network_access_authorization_rule_update_rank = try(local.defaults.ise.network_access.network_access_authorization_rule_update_rank, {})

  # Network Access Authorization Rule Update Rank (with defaults)
  network_access_authorization_rule_update_rank = [for item in try(local.ise.network_access.network_access_authorization_rule_update_rank, []) : merge(
    local.defaults_network_access_authorization_rule_update_rank, # defaults
    item, # original item
    { # Nested merges for complex attributes
    }
  )]
}

# Create network access authorization rule update rank
resource "ise_network_access_authorization_rule_update_rank" "network_access_authorization_rule_update_rank" {
  for_each = { for item in try(local.network_access_authorization_rule_update_rank, []) : item.name => item }

  # General attributes
  rule_id = try(each.value.rule_id, null)
  policy_set_id = try(each.value.policy_set_id, null)
  rank = try(each.value.rank, null)
  
  lifecycle {
    ignore_changes = [rule_id]
  }
}
#
# ==================================================================
# NETWORK ACCESS POLICY SET 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | name | String | True | Given name for the policy set, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses] |
# | description | String | False | The description of the policy set |
# | is_proxy | Bool | False | Flag which indicates if the policy set service is of type 'Proxy Sequence' or 'Allowed Protocols' |
# | rank | Int64 | False | The rank (priority) in relation to other policy sets. Lower rank is higher priority. |
# | service_name | String | True | Policy set service identifier. 'Allowed Protocols' or 'Server Sequence'. |
# | state | String | False | The state that the policy set is in. A disabled policy set cannot be matched. |
# | default | Bool | False | Indicates if this policy set is the default one |
# | condition_type | String | False | Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute. |
# | condition_id | String | False | UUID for condition |
# | condition_is_negate | Bool | False | Indicates whereas this condition is in negate mode |
# | condition_attribute_name | String | False | Dictionary attribute name |
# | condition_attribute_value | String | False | Attribute value for condition. Value type is specified in dictionary object. |
# | condition_dictionary_name | String | False | Dictionary name |
# | condition_dictionary_value | String | False | Dictionary value |
# | condition_operator | String | False | Equality operator |
# | children | List | False | List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`. |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_network_access_policy_set = try(local.defaults.ise.network_access.network_access_policy_set, {})

  # Network Access Policy Set (with defaults)
  network_access_policy_set = [for item in try(local.ise.network_access.network_access_policy_set, []) : merge(
    local.defaults_network_access_policy_set, # defaults
    item, # original item
    { # Nested merges for complex attributes
      children = [for i in try(item.children, []) : merge(
        try(local.defaults_network_access_policy_set.children, {}),
        i
      )]
    }
  )]
}

# Create network access policy set
resource "ise_network_access_policy_set" "network_access_policy_set" {
  for_each = { for item in try(local.network_access_policy_set, []) : item.name => item }

  # General attributes
  name = try(each.value.name, null)
  description = try(each.value.description, null)
  is_proxy = try(each.value.is_proxy, null)
  rank = try(each.value.rank, null)
  service_name = try(each.value.service_name, null)
  state = try(each.value.state, null)
  default = try(each.value.default, null)
  condition_type = try(each.value.condition_type, null)
  condition_id = try(each.value.condition_id, null)
  condition_is_negate = try(each.value.condition_is_negate, null)
  condition_attribute_name = try(each.value.condition_attribute_name, null)
  condition_attribute_value = try(each.value.condition_attribute_value, null)
  condition_dictionary_name = try(each.value.condition_dictionary_name, null)
  condition_dictionary_value = try(each.value.condition_dictionary_value, null)
  condition_operator = try(each.value.condition_operator, null)
  children = try([for i in each.value.children : {
    condition_type = try(i.condition_type, null),
    id = try(i.id, null),
    is_negate = try(i.is_negate, null),
    attribute_name = try(i.attribute_name, null),
    attribute_value = try(i.attribute_value, null),
    dictionary_name = try(i.dictionary_name, null),
    dictionary_value = try(i.dictionary_value, null),
    operator = try(i.operator, null),
    children = try(i.children, null)
  }], null)
  
  lifecycle {
    ignore_changes = []
  }
}
#
# ==================================================================
# NETWORK ACCESS AUTHORIZATION EXCEPTION RULE 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | policy_set_id | String | False | Policy set ID |
# | name | String | True | Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses] |
# | default | Bool | False | Indicates if this rule is the default one |
# | rank | Int64 | False | The rank (priority) in relation to other rules. Lower rank is higher priority. |
# | state | String | False | The state that the rule is in. A disabled rule cannot be matched. |
# | condition_type | String | False | Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute. |
# | condition_id | String | False | UUID for condition |
# | condition_is_negate | Bool | False | Indicates whereas this condition is in negate mode |
# | condition_attribute_name | String | False | Dictionary attribute name |
# | condition_attribute_value | String | False | Attribute value for condition. Value type is specified in dictionary object. |
# | condition_dictionary_name | String | False | Dictionary name |
# | condition_dictionary_value | String | False | Dictionary value |
# | condition_operator | String | False | Equality operator |
# | children | List | False | List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`. |
# | profiles | Set | False | The authorization profile(s) |
# | security_group | String | False | Security group used in authorization policies |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_network_access_authorization_exception_rule = try(local.defaults.ise.network_access.network_access_authorization_exception_rule, {})

  # Network Access Authorization Exception Rule (with defaults)
  network_access_authorization_exception_rule = [for item in try(local.ise.network_access.network_access_authorization_exception_rule, []) : merge(
    local.defaults_network_access_authorization_exception_rule, # defaults
    item, # original item
    { # Nested merges for complex attributes
      children = [for i in try(item.children, []) : merge(
        try(local.defaults_network_access_authorization_exception_rule.children, {}),
        i
      )]
    }
  )]
}

# Create network access authorization exception rule
resource "ise_network_access_authorization_exception_rule" "network_access_authorization_exception_rule" {
  for_each = { for item in try(local.network_access_authorization_exception_rule, []) : item.name => item }

  # General attributes
  policy_set_id = try(each.value.policy_set_id, null)
  name = try(each.value.name, null)
  default = try(each.value.default, null)
  rank = try(each.value.rank, null)
  state = try(each.value.state, null)
  condition_type = try(each.value.condition_type, null)
  condition_id = try(each.value.condition_id, null)
  condition_is_negate = try(each.value.condition_is_negate, null)
  condition_attribute_name = try(each.value.condition_attribute_name, null)
  condition_attribute_value = try(each.value.condition_attribute_value, null)
  condition_dictionary_name = try(each.value.condition_dictionary_name, null)
  condition_dictionary_value = try(each.value.condition_dictionary_value, null)
  condition_operator = try(each.value.condition_operator, null)
  children = try([for i in each.value.children : {
    condition_type = try(i.condition_type, null),
    id = try(i.id, null),
    is_negate = try(i.is_negate, null),
    attribute_name = try(i.attribute_name, null),
    attribute_value = try(i.attribute_value, null),
    dictionary_name = try(i.dictionary_name, null),
    dictionary_value = try(i.dictionary_value, null),
    operator = try(i.operator, null),
    children = try(i.children, null)
  }], null)
  profiles = try(each.value.profiles, null)
  security_group = try(each.value.security_group, null)
  
  lifecycle {
    ignore_changes = []
  }
}
#
# ==================================================================
# NETWORK ACCESS AUTHORIZATION GLOBAL EXCEPTION RULE UPDATE RANK 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | rule_id | String | True | Authorization global exception rule ID |
# | rank | Int64 | True | The rank (priority) in relation to other rules. Lower rank is higher priority. |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_network_access_authorization_global_exception_rule_update_rank = try(local.defaults.ise.network_access.network_access_authorization_global_exception_rule_update_rank, {})

  # Network Access Authorization Global Exception Rule Update Rank (with defaults)
  network_access_authorization_global_exception_rule_update_rank = [for item in try(local.ise.network_access.network_access_authorization_global_exception_rule_update_rank, []) : merge(
    local.defaults_network_access_authorization_global_exception_rule_update_rank, # defaults
    item, # original item
    { # Nested merges for complex attributes
    }
  )]
}

# Create network access authorization global exception rule update rank
resource "ise_network_access_authorization_global_exception_rule_update_rank" "network_access_authorization_global_exception_rule_update_rank" {
  for_each = { for item in try(local.network_access_authorization_global_exception_rule_update_rank, []) : item.name => item }

  # General attributes
  rule_id = try(each.value.rule_id, null)
  rank = try(each.value.rank, null)
  
  lifecycle {
    ignore_changes = [rule_id]
  }
}
#
# ==================================================================
# NETWORK ACCESS POLICY SET UPDATE RANKS 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | policies | List | False |  |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_network_access_policy_set_update_ranks = try(local.defaults.ise.network_access.network_access_policy_set_update_ranks, {})

  # Network Access Policy Set Update Ranks (with defaults)
  network_access_policy_set_update_ranks = [for item in try(local.ise.network_access.network_access_policy_set_update_ranks, []) : merge(
    local.defaults_network_access_policy_set_update_ranks, # defaults
    item, # original item
    { # Nested merges for complex attributes
      policies = [for i in try(item.policies, []) : merge(
        try(local.defaults_network_access_policy_set_update_ranks.policies, {}),
        i
      )]
    }
  )]
}

# Create network access policy set update ranks
resource "ise_network_access_policy_set_update_ranks" "network_access_policy_set_update_ranks" {
  for_each = { for item in try(local.network_access_policy_set_update_ranks, []) : item.name => item }

  # General attributes
  policies = try([for i in each.value.policies : {
    id = try(i.id, null),
    rank = try(i.rank, null)
  }], null)
  
  lifecycle {
    ignore_changes = []
  }
}
#
# ==================================================================
# AUTHORIZATION PROFILE 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | name | String | True | The name of the authorization profile |
# | description | String | False | Description |
# | vlan_name_id | String | False | Vlan name or ID |
# | vlan_tag_id | Int64 | False | Vlan tag ID |
# | web_redirection_type | String | False | This type must fit the `web_redirection_portal_name` |
# | web_redirection_acl | String | False | Web redirection ACL |
# | web_redirection_portal_name | String | False | A portal that exist in the DB and fits the `web_redirection_type` |
# | web_redirection_static_ip_host_name_fqdn | String | False | IP, hostname or FQDN |
# | web_redirection_display_certificates_renewal_messages | Bool | False | This attribute is mandatory when `web_redirection_type` value is `CentralizedWebAuth`. For all other `web_redirection_type` values the field must be ignored. |
# | agentless_posture | Bool | False | Agentless Posture. |
# | access_type | String | False | Access type |
# | profile_name | String | False | Value needs to be an existing Network Device Profile |
# | airespace_acl | String | False | Airespace ACL |
# | acl | String | False | ACL |
# | dacl_name | String | False | DACL name |
# | auto_smart_port | String | False | Auto smart port |
# | interface_template | String | False | Interface template |
# | ipv6_acl_filter | String | False | IPv6 ACL |
# | avc_profile | String | False | AVC profile |
# | asa_vpn | String | False | ASA VPN |
# | unique_identifier | String | False | Unique identifier |
# | track_movement | Bool | False | Track movement |
# | service_template | Bool | False | Service template |
# | easywired_session_candidate | Bool | False | Easy wired session candidate |
# | voice_domain_permission | Bool | False | Voice domain permission |
# | neat | Bool | False | NEAT |
# | web_auth | Bool | False | Web authentication (local) |
# | mac_sec_policy | String | False | MacSec policy |
# | reauthentication_connectivity | String | False | Maintain Connectivity During Reauthentication |
# | reauthentication_timer | Int64 | False | Reauthentication timer |
# | advanced_attributes | List | False | List of advanced attributes |
# | ipv6_dacl_name | String | False | IPv6 DACL name |
# | airespace_ipv6_acl | String | False | Airespace IPv6 ACL |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_authorization_profile = try(local.defaults.ise.network_access.authorization_profile, {})

  # Authorization Profile (with defaults)
  authorization_profile = [for item in try(local.ise.network_access.authorization_profile, []) : merge(
    local.defaults_authorization_profile, # defaults
    item, # original item
    { # Nested merges for complex attributes
      advanced_attributes = [for i in try(item.advanced_attributes, []) : merge(
        try(local.defaults_authorization_profile.advanced_attributes, {}),
        i
      )]
    }
  )]
}

# Create authorization profile
resource "ise_authorization_profile" "authorization_profile" {
  for_each = { for item in try(local.authorization_profile, []) : item.name => item }

  # General attributes
  name = try(each.value.name, null)
  description = try(each.value.description, null)
  vlan_name_id = try(each.value.vlan_name_id, null)
  vlan_tag_id = try(each.value.vlan_tag_id, null)
  web_redirection_type = try(each.value.web_redirection_type, null)
  web_redirection_acl = try(each.value.web_redirection_acl, null)
  web_redirection_portal_name = try(each.value.web_redirection_portal_name, null)
  web_redirection_static_ip_host_name_fqdn = try(each.value.web_redirection_static_ip_host_name_fqdn, null)
  web_redirection_display_certificates_renewal_messages = try(each.value.web_redirection_display_certificates_renewal_messages, null)
  agentless_posture = try(each.value.agentless_posture, null)
  access_type = try(each.value.access_type, null)
  profile_name = try(each.value.profile_name, null)
  airespace_acl = try(each.value.airespace_acl, null)
  acl = try(each.value.acl, null)
  dacl_name = try(each.value.dacl_name, null)
  auto_smart_port = try(each.value.auto_smart_port, null)
  interface_template = try(each.value.interface_template, null)
  ipv6_acl_filter = try(each.value.ipv6_acl_filter, null)
  avc_profile = try(each.value.avc_profile, null)
  asa_vpn = try(each.value.asa_vpn, null)
  unique_identifier = try(each.value.unique_identifier, null)
  track_movement = try(each.value.track_movement, null)
  service_template = try(each.value.service_template, null)
  easywired_session_candidate = try(each.value.easywired_session_candidate, null)
  voice_domain_permission = try(each.value.voice_domain_permission, null)
  neat = try(each.value.neat, null)
  web_auth = try(each.value.web_auth, null)
  mac_sec_policy = try(each.value.mac_sec_policy, null)
  reauthentication_connectivity = try(each.value.reauthentication_connectivity, null)
  reauthentication_timer = try(each.value.reauthentication_timer, null)
  advanced_attributes = try([for i in each.value.advanced_attributes : {
    attribute_left_dictionary_name = try(i.attribute_left_dictionary_name, null),
    attribute_left_name = try(i.attribute_left_name, null),
    attribute_right_value_type = try(i.attribute_right_value_type, null),
    attribute_right_value = try(i.attribute_right_value, null),
    attribute_right_dictionary_name = try(i.attribute_right_dictionary_name, null),
    attribute_right_name = try(i.attribute_right_name, null)
  }], null)
  ipv6_dacl_name = try(each.value.ipv6_dacl_name, null)
  airespace_ipv6_acl = try(each.value.airespace_ipv6_acl, null)
  
  lifecycle {
    ignore_changes = []
  }
}
#
# ==================================================================
# NETWORK ACCESS AUTHORIZATION GLOBAL EXCEPTION RULE 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | name | String | True | Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses] |
# | rank | Int64 | False | The rank (priority) in relation to other rules. Lower rank is higher priority. |
# | state | String | False | The state that the rule is in. A disabled rule cannot be matched. |
# | condition_type | String | False | Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute. |
# | condition_id | String | False | UUID for condition |
# | condition_is_negate | Bool | False | Indicates whereas this condition is in negate mode |
# | condition_attribute_name | String | False | Dictionary attribute name |
# | condition_attribute_value | String | False | Attribute value for condition. Value type is specified in dictionary object. |
# | condition_dictionary_name | String | False | Dictionary name |
# | condition_dictionary_value | String | False | Dictionary value |
# | condition_operator | String | False | Equality operator |
# | children | List | False | List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`. |
# | profiles | Set | False | The authorization profile(s) |
# | security_group | String | False | Security group used in authorization policies |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_network_access_authorization_global_exception_rule = try(local.defaults.ise.network_access.network_access_authorization_global_exception_rule, {})

  # Network Access Authorization Global Exception Rule (with defaults)
  network_access_authorization_global_exception_rule = [for item in try(local.ise.network_access.network_access_authorization_global_exception_rule, []) : merge(
    local.defaults_network_access_authorization_global_exception_rule, # defaults
    item, # original item
    { # Nested merges for complex attributes
      children = [for i in try(item.children, []) : merge(
        try(local.defaults_network_access_authorization_global_exception_rule.children, {}),
        i
      )]
    }
  )]
}

# Create network access authorization global exception rule
resource "ise_network_access_authorization_global_exception_rule" "network_access_authorization_global_exception_rule" {
  for_each = { for item in try(local.network_access_authorization_global_exception_rule, []) : item.name => item }

  # General attributes
  name = try(each.value.name, null)
  rank = try(each.value.rank, null)
  state = try(each.value.state, null)
  condition_type = try(each.value.condition_type, null)
  condition_id = try(each.value.condition_id, null)
  condition_is_negate = try(each.value.condition_is_negate, null)
  condition_attribute_name = try(each.value.condition_attribute_name, null)
  condition_attribute_value = try(each.value.condition_attribute_value, null)
  condition_dictionary_name = try(each.value.condition_dictionary_name, null)
  condition_dictionary_value = try(each.value.condition_dictionary_value, null)
  condition_operator = try(each.value.condition_operator, null)
  children = try([for i in each.value.children : {
    condition_type = try(i.condition_type, null),
    id = try(i.id, null),
    is_negate = try(i.is_negate, null),
    attribute_name = try(i.attribute_name, null),
    attribute_value = try(i.attribute_value, null),
    dictionary_name = try(i.dictionary_name, null),
    dictionary_value = try(i.dictionary_value, null),
    operator = try(i.operator, null),
    children = try(i.children, null)
  }], null)
  profiles = try(each.value.profiles, null)
  security_group = try(each.value.security_group, null)
  
  lifecycle {
    ignore_changes = []
  }
}
#
# ==================================================================
# NETWORK ACCESS DICTIONARY 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | name | String | True | The dictionary name |
# | description | String | False | The description of the dictionary |
# | version | String | True | The version of the dictionary |
# | dictionary_attr_type | String | True | The dictionary attribute type |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_network_access_dictionary = try(local.defaults.ise.network_access.network_access_dictionary, {})

  # Network Access Dictionary (with defaults)
  network_access_dictionary = [for item in try(local.ise.network_access.network_access_dictionary, []) : merge(
    local.defaults_network_access_dictionary, # defaults
    item, # original item
    { # Nested merges for complex attributes
    }
  )]
}

# Create network access dictionary
resource "ise_network_access_dictionary" "network_access_dictionary" {
  for_each = { for item in try(local.network_access_dictionary, []) : item.name => item }

  # General attributes
  name = try(each.value.name, null)
  description = try(each.value.description, null)
  version = try(each.value.version, null)
  dictionary_attr_type = try(each.value.dictionary_attr_type, null)
  
  lifecycle {
    ignore_changes = []
  }
}
#
# ==================================================================
# NETWORK ACCESS AUTHENTICATION RULE UPDATE RANKS 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | policy_set_id | String | True | Policy set ID |
# | rules | List | False |  |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_network_access_authentication_rule_update_ranks = try(local.defaults.ise.network_access.network_access_authentication_rule_update_ranks, {})

  # Network Access Authentication Rule Update Ranks (with defaults)
  network_access_authentication_rule_update_ranks = [for item in try(local.ise.network_access.network_access_authentication_rule_update_ranks, []) : merge(
    local.defaults_network_access_authentication_rule_update_ranks, # defaults
    item, # original item
    { # Nested merges for complex attributes
      rules = [for i in try(item.rules, []) : merge(
        try(local.defaults_network_access_authentication_rule_update_ranks.rules, {}),
        i
      )]
    }
  )]
}

# Create network access authentication rule update ranks
resource "ise_network_access_authentication_rule_update_ranks" "network_access_authentication_rule_update_ranks" {
  for_each = { for item in try(local.network_access_authentication_rule_update_ranks, []) : item.name => item }

  # General attributes
  policy_set_id = try(each.value.policy_set_id, null)
  rules = try([for i in each.value.rules : {
    id = try(i.id, null),
    rank = try(i.rank, null)
  }], null)
  
  lifecycle {
    ignore_changes = []
  }
}
#
# ==================================================================
# NETWORK ACCESS AUTHORIZATION RULE UPDATE RANKS 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | policy_set_id | String | True | Policy set ID |
# | rules | List | False |  |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_network_access_authorization_rule_update_ranks = try(local.defaults.ise.network_access.network_access_authorization_rule_update_ranks, {})

  # Network Access Authorization Rule Update Ranks (with defaults)
  network_access_authorization_rule_update_ranks = [for item in try(local.ise.network_access.network_access_authorization_rule_update_ranks, []) : merge(
    local.defaults_network_access_authorization_rule_update_ranks, # defaults
    item, # original item
    { # Nested merges for complex attributes
      rules = [for i in try(item.rules, []) : merge(
        try(local.defaults_network_access_authorization_rule_update_ranks.rules, {}),
        i
      )]
    }
  )]
}

# Create network access authorization rule update ranks
resource "ise_network_access_authorization_rule_update_ranks" "network_access_authorization_rule_update_ranks" {
  for_each = { for item in try(local.network_access_authorization_rule_update_ranks, []) : item.name => item }

  # General attributes
  policy_set_id = try(each.value.policy_set_id, null)
  rules = try([for i in each.value.rules : {
    id = try(i.id, null),
    rank = try(i.rank, null)
  }], null)
  
  lifecycle {
    ignore_changes = []
  }
}
#
# ==================================================================
# NETWORK ACCESS AUTHENTICATION RULE UPDATE RANK 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | rule_id | String | True | Authentication rule ID |
# | policy_set_id | String | False | Policy set ID |
# | rank | Int64 | True | The rank (priority) in relation to other rules. Lower rank is higher priority. |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_network_access_authentication_rule_update_rank = try(local.defaults.ise.network_access.network_access_authentication_rule_update_rank, {})

  # Network Access Authentication Rule Update Rank (with defaults)
  network_access_authentication_rule_update_rank = [for item in try(local.ise.network_access.network_access_authentication_rule_update_rank, []) : merge(
    local.defaults_network_access_authentication_rule_update_rank, # defaults
    item, # original item
    { # Nested merges for complex attributes
    }
  )]
}

# Create network access authentication rule update rank
resource "ise_network_access_authentication_rule_update_rank" "network_access_authentication_rule_update_rank" {
  for_each = { for item in try(local.network_access_authentication_rule_update_rank, []) : item.name => item }

  # General attributes
  rule_id = try(each.value.rule_id, null)
  policy_set_id = try(each.value.policy_set_id, null)
  rank = try(each.value.rank, null)
  
  lifecycle {
    ignore_changes = [rule_id]
  }
}
#
# ==================================================================
# NETWORK ACCESS AUTHORIZATION RULE 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | policy_set_id | String | False | Policy set ID |
# | name | String | True | Rule name, [Valid characters are alphanumerics, underscore, hyphen, space, period, parentheses] |
# | default | Bool | False | Indicates if this rule is the default one |
# | rank | Int64 | False | The rank (priority) in relation to other rules. Lower rank is higher priority. |
# | state | String | False | The state that the rule is in. A disabled rule cannot be matched. |
# | condition_type | String | False | Indicates whether the record is the condition itself or a logical aggregation. Logical aggreation indicates that additional conditions are present under the children attribute. |
# | condition_id | String | False | UUID for condition |
# | condition_is_negate | Bool | False | Indicates whereas this condition is in negate mode |
# | condition_attribute_name | String | False | Dictionary attribute name |
# | condition_attribute_value | String | False | Attribute value for condition. Value type is specified in dictionary object. |
# | condition_dictionary_name | String | False | Dictionary name |
# | condition_dictionary_value | String | False | Dictionary value |
# | condition_operator | String | False | Equality operator |
# | children | List | False | List of child conditions. `condition_type` must be one of `ConditionAndBlock` or `ConditionOrBlock`. |
# | profiles | Set | False | The authorization profile(s) |
# | security_group | String | False | Security group used in authorization policies |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_network_access_authorization_rule = try(local.defaults.ise.network_access.network_access_authorization_rule, {})

  # Network Access Authorization Rule (with defaults)
  network_access_authorization_rule = [for item in try(local.ise.network_access.network_access_authorization_rule, []) : merge(
    local.defaults_network_access_authorization_rule, # defaults
    item, # original item
    { # Nested merges for complex attributes
      children = [for i in try(item.children, []) : merge(
        try(local.defaults_network_access_authorization_rule.children, {}),
        i
      )]
    }
  )]
}

# Create network access authorization rule
resource "ise_network_access_authorization_rule" "network_access_authorization_rule" {
  for_each = { for item in try(local.network_access_authorization_rule, []) : item.name => item }

  # General attributes
  policy_set_id = try(each.value.policy_set_id, null)
  name = try(each.value.name, null)
  default = try(each.value.default, null)
  rank = try(each.value.rank, null)
  state = try(each.value.state, null)
  condition_type = try(each.value.condition_type, null)
  condition_id = try(each.value.condition_id, null)
  condition_is_negate = try(each.value.condition_is_negate, null)
  condition_attribute_name = try(each.value.condition_attribute_name, null)
  condition_attribute_value = try(each.value.condition_attribute_value, null)
  condition_dictionary_name = try(each.value.condition_dictionary_name, null)
  condition_dictionary_value = try(each.value.condition_dictionary_value, null)
  condition_operator = try(each.value.condition_operator, null)
  children = try([for i in each.value.children : {
    condition_type = try(i.condition_type, null),
    id = try(i.id, null),
    is_negate = try(i.is_negate, null),
    attribute_name = try(i.attribute_name, null),
    attribute_value = try(i.attribute_value, null),
    dictionary_name = try(i.dictionary_name, null),
    dictionary_value = try(i.dictionary_value, null),
    operator = try(i.operator, null),
    children = try(i.children, null)
  }], null)
  profiles = try(each.value.profiles, null)
  security_group = try(each.value.security_group, null)
  
  lifecycle {
    ignore_changes = []
  }
}
#
# ==================================================================
# NETWORK ACCESS AUTHORIZATION GLOBAL EXCEPTION RULE UPDATE RANKS 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | rules | List | False |  |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_network_access_authorization_global_exception_rule_update_ranks = try(local.defaults.ise.network_access.network_access_authorization_global_exception_rule_update_ranks, {})

  # Network Access Authorization Global Exception Rule Update Ranks (with defaults)
  network_access_authorization_global_exception_rule_update_ranks = [for item in try(local.ise.network_access.network_access_authorization_global_exception_rule_update_ranks, []) : merge(
    local.defaults_network_access_authorization_global_exception_rule_update_ranks, # defaults
    item, # original item
    { # Nested merges for complex attributes
      rules = [for i in try(item.rules, []) : merge(
        try(local.defaults_network_access_authorization_global_exception_rule_update_ranks.rules, {}),
        i
      )]
    }
  )]
}

# Create network access authorization global exception rule update ranks
resource "ise_network_access_authorization_global_exception_rule_update_ranks" "network_access_authorization_global_exception_rule_update_ranks" {
  for_each = { for item in try(local.network_access_authorization_global_exception_rule_update_ranks, []) : item.name => item }

  # General attributes
  rules = try([for i in each.value.rules : {
    id = try(i.id, null),
    rank = try(i.rank, null)
  }], null)
  
  lifecycle {
    ignore_changes = []
  }
}
#
# ==================================================================
# NETWORK ACCESS AUTHORIZATION EXCEPTION RULE UPDATE RANK 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | rule_id | String | True | Authorization exception rule ID |
# | policy_set_id | String | False | Policy set ID |
# | rank | Int64 | True | The rank (priority) in relation to other rules. Lower rank is higher priority. |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_network_access_authorization_exception_rule_update_rank = try(local.defaults.ise.network_access.network_access_authorization_exception_rule_update_rank, {})

  # Network Access Authorization Exception Rule Update Rank (with defaults)
  network_access_authorization_exception_rule_update_rank = [for item in try(local.ise.network_access.network_access_authorization_exception_rule_update_rank, []) : merge(
    local.defaults_network_access_authorization_exception_rule_update_rank, # defaults
    item, # original item
    { # Nested merges for complex attributes
    }
  )]
}

# Create network access authorization exception rule update rank
resource "ise_network_access_authorization_exception_rule_update_rank" "network_access_authorization_exception_rule_update_rank" {
  for_each = { for item in try(local.network_access_authorization_exception_rule_update_rank, []) : item.name => item }

  # General attributes
  rule_id = try(each.value.rule_id, null)
  policy_set_id = try(each.value.policy_set_id, null)
  rank = try(each.value.rank, null)
  
  lifecycle {
    ignore_changes = [rule_id]
  }
}
