#
# ################################################################################
#
# This file was automatically generated with ./gen/generate_module.py
#          Do not edit this file directly.
#          More information in repository README.md
#
# ################################################################################
#
#
# ==================================================================
# NETWORK DEVICE 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | name | String | True | The name of the network device |
# | description | String | False | Description |
# | authentication_enable_key_wrap | Bool | False | Enable key wrap |
# | authentication_encryption_key | String | False | Encryption key |
# | authentication_encryption_key_format | String | False | Key input format |
# | authentication_message_authenticator_code_key | String | False | Message authenticator code key |
# | authentication_network_protocol | String | False | Network protocol |
# | authentication_radius_shared_secret | String | False | RADIUS shared secret |
# | authentication_enable_multi_secret | Bool | False | Enable multiple RADIUS shared secrets |
# | authentication_second_radius_shared_secret | String | False | Second RADIUS shared secret |
# | authentication_dtls_required | Bool | False | Enforce use of DTLS |
# | coa_port | Int64 | False | CoA port |
# | dtls_dns_name | String | False | This value is used to verify the client identity contained in the X.509 RADIUS/DTLS client certificate |
# | ips | List | True | List of IP subnets |
# | network_device_groups | Set | False | List of network device groups, e.g. `Device Type#All Device Types#ACCESS` |
# | model_name | String | False | Model name |
# | software_version | String | False | Software version |
# | profile_name | String | False | Profile name |
# | snmp_link_trap_query | Bool | False | SNMP link Trap Query |
# | snmp_mac_trap_query | Bool | False | SNMP MAC Trap Query |
# | snmp_originating_policy_service_node | String | False | Originating Policy Services Node |
# | snmp_polling_interval | Int64 | False | SNMP Polling Interval in seconds |
# | snmp_ro_community | String | False | SNMP RO Community |
# | snmp_version | String | False | SNMP version |
# | tacacs_connect_mode_options | String | False | Connect mode options |
# | tacacs_shared_secret | String | False | Shared secret |
# | trustsec_device_id | String | False | TrustSec device ID |
# | trustsec_device_password | String | False | TrustSec device password |
# | trustsec_rest_api_username | String | False | REST API username |
# | trustsec_rest_api_password | String | False | REST API password |
# | trustsec_enable_mode_password | String | False | Enable mode password |
# | trustsec_exec_mode_password | String | False | EXEC mode password |
# | trustsec_exec_mode_username | String | False | EXEC mode username |
# | trustsec_include_when_deploying_sgt_updates | Bool | False | Include this device when deploying Security Group Tag Mapping Updates |
# | trustsec_download_environment_data_every_x_seconds | Int64 | False | Download environment data every X seconds |
# | trustsec_download_peer_authorization_policy_every_x_seconds | Int64 | False | Download peer authorization policy every X seconds |
# | trustsec_download_sgacl_lists_every_x_seconds | Int64 | False | Download SGACL lists every X seconds |
# | trustsec_other_sga_devices_to_trust_this_device | Bool | False | Other TrustSec devices to trust this device |
# | trustsec_re_authentication_every_x_seconds | Int64 | False | Re-authenticate every X seconds |
# | trustsec_send_configuration_to_device | Bool | False | Send configuration to device |
# | trustsec_send_configuration_to_device_using | String | False | Send configuration to device using |
# | trustsec_coa_source_host | String | False | CoA source host |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_network_device = try(local.defaults.ise.network_resources.network_device, {})

  # Network Device (with defaults)
  network_device = [for item in try(local.ise.network_resources.network_device, []) : merge(
    local.defaults_network_device, # defaults
    item, # original item
    { # Nested merges for complex attributes
      ips = [for i in try(item.ips, []) : merge(
        try(local.defaults_network_device.ips, {}),
        i
      )]
    }
  )]
}

# Create network device
resource "ise_network_device" "network_device" {
  for_each = { for item in try(local.network_device, []) : item.name => item }

  # General attributes
  name = try(each.value.name, null)
  description = try(each.value.description, null)
  authentication_enable_key_wrap = try(each.value.authentication_enable_key_wrap, null)
  authentication_encryption_key = sensitive(try(each.value.authentication_encryption_key, null))
  authentication_encryption_key_format = try(each.value.authentication_encryption_key_format, null)
  authentication_message_authenticator_code_key = sensitive(try(each.value.authentication_message_authenticator_code_key, null))
  authentication_network_protocol = try(each.value.authentication_network_protocol, null)
  authentication_radius_shared_secret = sensitive(try(each.value.authentication_radius_shared_secret, null))
  authentication_enable_multi_secret = try(each.value.authentication_enable_multi_secret, null)
  authentication_second_radius_shared_secret = sensitive(try(each.value.authentication_second_radius_shared_secret, null))
  authentication_dtls_required = try(each.value.authentication_dtls_required, null)
  coa_port = try(each.value.coa_port, null)
  dtls_dns_name = try(each.value.dtls_dns_name, null)
  ips = try([for i in each.value.ips : {
    ipaddress = try(i.ipaddress, null),
    ipaddress_exclude = try(i.ipaddress_exclude, null),
    mask = try(i.mask, null)
  }], null)
  network_device_groups = try(each.value.network_device_groups, null)
  model_name = try(each.value.model_name, null)
  software_version = try(each.value.software_version, null)
  profile_name = try(each.value.profile_name, null)
  snmp_link_trap_query = try(each.value.snmp_link_trap_query, null)
  snmp_mac_trap_query = try(each.value.snmp_mac_trap_query, null)
  snmp_originating_policy_service_node = try(each.value.snmp_originating_policy_service_node, null)
  snmp_polling_interval = try(each.value.snmp_polling_interval, null)
  snmp_ro_community = sensitive(try(each.value.snmp_ro_community, null))
  snmp_version = try(each.value.snmp_version, null)
  tacacs_connect_mode_options = try(each.value.tacacs_connect_mode_options, null)
  tacacs_shared_secret = sensitive(try(each.value.tacacs_shared_secret, null))
  trustsec_device_id = try(each.value.trustsec_device_id, null)
  trustsec_device_password = sensitive(try(each.value.trustsec_device_password, null))
  trustsec_rest_api_username = sensitive(try(each.value.trustsec_rest_api_username, null))
  trustsec_rest_api_password = sensitive(try(each.value.trustsec_rest_api_password, null))
  trustsec_enable_mode_password = sensitive(try(each.value.trustsec_enable_mode_password, null))
  trustsec_exec_mode_password = sensitive(try(each.value.trustsec_exec_mode_password, null))
  trustsec_exec_mode_username = sensitive(try(each.value.trustsec_exec_mode_username, null))
  trustsec_include_when_deploying_sgt_updates = try(each.value.trustsec_include_when_deploying_sgt_updates, null)
  trustsec_download_environment_data_every_x_seconds = try(each.value.trustsec_download_environment_data_every_x_seconds, null)
  trustsec_download_peer_authorization_policy_every_x_seconds = try(each.value.trustsec_download_peer_authorization_policy_every_x_seconds, null)
  trustsec_download_sgacl_lists_every_x_seconds = try(each.value.trustsec_download_sgacl_lists_every_x_seconds, null)
  trustsec_other_sga_devices_to_trust_this_device = try(each.value.trustsec_other_sga_devices_to_trust_this_device, null)
  trustsec_re_authentication_every_x_seconds = try(each.value.trustsec_re_authentication_every_x_seconds, null)
  trustsec_send_configuration_to_device = try(each.value.trustsec_send_configuration_to_device, null)
  trustsec_send_configuration_to_device_using = try(each.value.trustsec_send_configuration_to_device_using, null)
  trustsec_coa_source_host = try(each.value.trustsec_coa_source_host, null)
  
  lifecycle {
    ignore_changes = [trustsec_rest_api_password]
  }
}
#
# ==================================================================
# NETWORK DEVICE GROUP 
# ==================================================================
#
# | Attribute Name | Type | Required | Description |
# |--------------|------|----------|-------------|
# | name | String | True | The name of the network device group including its hierarchy, e.g. `Device Type#All Device Types#ACCESS`. |
# | description | String | False | Description |
# | root_group | String | True | The name of the root device group. |
#

locals {
  # Get defaults from configuration or empty map if not present
  defaults_network_device_group = try(local.defaults.ise.network_resources.network_device_group, {})

  # Network Device Group (with defaults)
  network_device_group = [for item in try(local.ise.network_resources.network_device_group, []) : merge(
    local.defaults_network_device_group, # defaults
    item, # original item
    { # Nested merges for complex attributes
    }
  )]
}

# Create network device group
resource "ise_network_device_group" "network_device_group" {
  for_each = { for item in try(local.network_device_group, []) : item.name => item }

  # General attributes
  name = try(each.value.name, null)
  description = try(each.value.description, null)
  root_group = try(each.value.root_group, null)
  
  lifecycle {
    ignore_changes = []
  }
}
